
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Enrollments
 * 
 */
export type Enrollments = $Result.DefaultSelection<Prisma.$EnrollmentsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Assignment
 * 
 */
export type Assignment = $Result.DefaultSelection<Prisma.$AssignmentPayload>
/**
 * Model AssignmentSolution
 * 
 */
export type AssignmentSolution = $Result.DefaultSelection<Prisma.$AssignmentSolutionPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model TestCase
 * 
 */
export type TestCase = $Result.DefaultSelection<Prisma.$TestCasePayload>
/**
 * Model Hint
 * 
 */
export type Hint = $Result.DefaultSelection<Prisma.$HintPayload>
/**
 * Model ExerciseSolution
 * 
 */
export type ExerciseSolution = $Result.DefaultSelection<Prisma.$ExerciseSolutionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Enrollments
 * const enrollments = await prisma.enrollments.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Enrollments
   * const enrollments = await prisma.enrollments.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.enrollments`: Exposes CRUD operations for the **Enrollments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollments.findMany()
    * ```
    */
  get enrollments(): Prisma.EnrollmentsDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs>;

  /**
   * `prisma.assignmentSolution`: Exposes CRUD operations for the **AssignmentSolution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssignmentSolutions
    * const assignmentSolutions = await prisma.assignmentSolution.findMany()
    * ```
    */
  get assignmentSolution(): Prisma.AssignmentSolutionDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs>;

  /**
   * `prisma.testCase`: Exposes CRUD operations for the **TestCase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestCases
    * const testCases = await prisma.testCase.findMany()
    * ```
    */
  get testCase(): Prisma.TestCaseDelegate<ExtArgs>;

  /**
   * `prisma.hint`: Exposes CRUD operations for the **Hint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hints
    * const hints = await prisma.hint.findMany()
    * ```
    */
  get hint(): Prisma.HintDelegate<ExtArgs>;

  /**
   * `prisma.exerciseSolution`: Exposes CRUD operations for the **ExerciseSolution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExerciseSolutions
    * const exerciseSolutions = await prisma.exerciseSolution.findMany()
    * ```
    */
  get exerciseSolution(): Prisma.ExerciseSolutionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Enrollments: 'Enrollments',
    User: 'User',
    Course: 'Course',
    Assignment: 'Assignment',
    AssignmentSolution: 'AssignmentSolution',
    Session: 'Session',
    Exercise: 'Exercise',
    TestCase: 'TestCase',
    Hint: 'Hint',
    ExerciseSolution: 'ExerciseSolution'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'enrollments' | 'user' | 'course' | 'assignment' | 'assignmentSolution' | 'session' | 'exercise' | 'testCase' | 'hint' | 'exerciseSolution'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Enrollments: {
        payload: Prisma.$EnrollmentsPayload<ExtArgs>
        fields: Prisma.EnrollmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          findMany: {
            args: Prisma.EnrollmentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>[]
          }
          create: {
            args: Prisma.EnrollmentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          createMany: {
            args: Prisma.EnrollmentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EnrollmentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          update: {
            args: Prisma.EnrollmentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEnrollments>
          }
          groupBy: {
            args: Prisma.EnrollmentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EnrollmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentsCountArgs<ExtArgs>,
            result: $Utils.Optional<EnrollmentsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Assignment: {
        payload: Prisma.$AssignmentPayload<ExtArgs>
        fields: Prisma.AssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findFirst: {
            args: Prisma.AssignmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findMany: {
            args: Prisma.AssignmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          create: {
            args: Prisma.AssignmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          createMany: {
            args: Prisma.AssignmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AssignmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          update: {
            args: Prisma.AssignmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AssignmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          aggregate: {
            args: Prisma.AssignmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAssignment>
          }
          groupBy: {
            args: Prisma.AssignmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentCountArgs<ExtArgs>,
            result: $Utils.Optional<AssignmentCountAggregateOutputType> | number
          }
        }
      }
      AssignmentSolution: {
        payload: Prisma.$AssignmentSolutionPayload<ExtArgs>
        fields: Prisma.AssignmentSolutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentSolutionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentSolutionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload>
          }
          findFirst: {
            args: Prisma.AssignmentSolutionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentSolutionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload>
          }
          findMany: {
            args: Prisma.AssignmentSolutionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload>[]
          }
          create: {
            args: Prisma.AssignmentSolutionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload>
          }
          createMany: {
            args: Prisma.AssignmentSolutionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AssignmentSolutionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload>
          }
          update: {
            args: Prisma.AssignmentSolutionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentSolutionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentSolutionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AssignmentSolutionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AssignmentSolutionPayload>
          }
          aggregate: {
            args: Prisma.AssignmentSolutionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAssignmentSolution>
          }
          groupBy: {
            args: Prisma.AssignmentSolutionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AssignmentSolutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentSolutionCountArgs<ExtArgs>,
            result: $Utils.Optional<AssignmentSolutionCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      TestCase: {
        payload: Prisma.$TestCasePayload<ExtArgs>
        fields: Prisma.TestCaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestCaseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestCaseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          findFirst: {
            args: Prisma.TestCaseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestCaseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          findMany: {
            args: Prisma.TestCaseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>[]
          }
          create: {
            args: Prisma.TestCaseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          createMany: {
            args: Prisma.TestCaseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TestCaseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          update: {
            args: Prisma.TestCaseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          deleteMany: {
            args: Prisma.TestCaseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TestCaseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TestCaseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          aggregate: {
            args: Prisma.TestCaseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTestCase>
          }
          groupBy: {
            args: Prisma.TestCaseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TestCaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCaseCountArgs<ExtArgs>,
            result: $Utils.Optional<TestCaseCountAggregateOutputType> | number
          }
        }
      }
      Hint: {
        payload: Prisma.$HintPayload<ExtArgs>
        fields: Prisma.HintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HintFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HintFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload>
          }
          findFirst: {
            args: Prisma.HintFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HintFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload>
          }
          findMany: {
            args: Prisma.HintFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload>[]
          }
          create: {
            args: Prisma.HintCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload>
          }
          createMany: {
            args: Prisma.HintCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HintDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload>
          }
          update: {
            args: Prisma.HintUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload>
          }
          deleteMany: {
            args: Prisma.HintDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HintUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HintUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HintPayload>
          }
          aggregate: {
            args: Prisma.HintAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHint>
          }
          groupBy: {
            args: Prisma.HintGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HintGroupByOutputType>[]
          }
          count: {
            args: Prisma.HintCountArgs<ExtArgs>,
            result: $Utils.Optional<HintCountAggregateOutputType> | number
          }
        }
      }
      ExerciseSolution: {
        payload: Prisma.$ExerciseSolutionPayload<ExtArgs>
        fields: Prisma.ExerciseSolutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseSolutionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseSolutionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload>
          }
          findFirst: {
            args: Prisma.ExerciseSolutionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseSolutionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload>
          }
          findMany: {
            args: Prisma.ExerciseSolutionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload>[]
          }
          create: {
            args: Prisma.ExerciseSolutionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload>
          }
          createMany: {
            args: Prisma.ExerciseSolutionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExerciseSolutionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload>
          }
          update: {
            args: Prisma.ExerciseSolutionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload>
          }
          deleteMany: {
            args: Prisma.ExerciseSolutionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseSolutionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseSolutionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseSolutionPayload>
          }
          aggregate: {
            args: Prisma.ExerciseSolutionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExerciseSolution>
          }
          groupBy: {
            args: Prisma.ExerciseSolutionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseSolutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseSolutionCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseSolutionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    enrollments: number
    submitted_assignments: number
    submitted_exercises: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | UserCountOutputTypeCountEnrollmentsArgs
    submitted_assignments?: boolean | UserCountOutputTypeCountSubmitted_assignmentsArgs
    submitted_exercises?: boolean | UserCountOutputTypeCountSubmitted_exercisesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmitted_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentSolutionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmitted_exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseSolutionWhereInput
  }



  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    enrollments: number
    sessions: number
    assignments: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | CourseCountOutputTypeCountEnrollmentsArgs
    sessions?: boolean | CourseCountOutputTypeCountSessionsArgs
    assignments?: boolean | CourseCountOutputTypeCountAssignmentsArgs
  }

  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }



  /**
   * Count Type AssignmentCountOutputType
   */

  export type AssignmentCountOutputType = {
    solutions: number
  }

  export type AssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solutions?: boolean | AssignmentCountOutputTypeCountSolutionsArgs
  }

  // Custom InputTypes

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentCountOutputType
     */
    select?: AssignmentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentSolutionWhereInput
  }



  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    exercises: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | SessionCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }



  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    test_case: number
    hints: number
    solutions: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test_case?: boolean | ExerciseCountOutputTypeCountTest_caseArgs
    hints?: boolean | ExerciseCountOutputTypeCountHintsArgs
    solutions?: boolean | ExerciseCountOutputTypeCountSolutionsArgs
  }

  // Custom InputTypes

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountTest_caseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseWhereInput
  }


  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountHintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HintWhereInput
  }


  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseSolutionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Enrollments
   */

  export type AggregateEnrollments = {
    _count: EnrollmentsCountAggregateOutputType | null
    _avg: EnrollmentsAvgAggregateOutputType | null
    _sum: EnrollmentsSumAggregateOutputType | null
    _min: EnrollmentsMinAggregateOutputType | null
    _max: EnrollmentsMaxAggregateOutputType | null
  }

  export type EnrollmentsAvgAggregateOutputType = {
    enrollment_id: number | null
    total_points: number | null
  }

  export type EnrollmentsSumAggregateOutputType = {
    enrollment_id: number | null
    total_points: number | null
  }

  export type EnrollmentsMinAggregateOutputType = {
    enrollment_id: number | null
    role: $Enums.Role | null
    total_points: number | null
  }

  export type EnrollmentsMaxAggregateOutputType = {
    enrollment_id: number | null
    role: $Enums.Role | null
    total_points: number | null
  }

  export type EnrollmentsCountAggregateOutputType = {
    enrollment_id: number
    role: number
    total_points: number
    _all: number
  }


  export type EnrollmentsAvgAggregateInputType = {
    enrollment_id?: true
    total_points?: true
  }

  export type EnrollmentsSumAggregateInputType = {
    enrollment_id?: true
    total_points?: true
  }

  export type EnrollmentsMinAggregateInputType = {
    enrollment_id?: true
    role?: true
    total_points?: true
  }

  export type EnrollmentsMaxAggregateInputType = {
    enrollment_id?: true
    role?: true
    total_points?: true
  }

  export type EnrollmentsCountAggregateInputType = {
    enrollment_id?: true
    role?: true
    total_points?: true
    _all?: true
  }

  export type EnrollmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to aggregate.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentsMaxAggregateInputType
  }

  export type GetEnrollmentsAggregateType<T extends EnrollmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollments[P]>
      : GetScalarType<T[P], AggregateEnrollments[P]>
  }




  export type EnrollmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithAggregationInput | EnrollmentsOrderByWithAggregationInput[]
    by: EnrollmentsScalarFieldEnum[] | EnrollmentsScalarFieldEnum
    having?: EnrollmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentsCountAggregateInputType | true
    _avg?: EnrollmentsAvgAggregateInputType
    _sum?: EnrollmentsSumAggregateInputType
    _min?: EnrollmentsMinAggregateInputType
    _max?: EnrollmentsMaxAggregateInputType
  }

  export type EnrollmentsGroupByOutputType = {
    enrollment_id: number
    role: $Enums.Role
    total_points: number | null
    _count: EnrollmentsCountAggregateOutputType | null
    _avg: EnrollmentsAvgAggregateOutputType | null
    _sum: EnrollmentsSumAggregateOutputType | null
    _min: EnrollmentsMinAggregateOutputType | null
    _max: EnrollmentsMaxAggregateOutputType | null
  }

  type GetEnrollmentsGroupByPayload<T extends EnrollmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentsGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentsGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    enrollment_id?: boolean
    role?: boolean
    total_points?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollments"]>

  export type EnrollmentsSelectScalar = {
    enrollment_id?: boolean
    role?: boolean
    total_points?: boolean
  }

  export type EnrollmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $EnrollmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollments"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      enrollment_id: number
      role: $Enums.Role
      total_points: number | null
    }, ExtArgs["result"]["enrollments"]>
    composites: {}
  }


  type EnrollmentsGetPayload<S extends boolean | null | undefined | EnrollmentsDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentsPayload, S>

  type EnrollmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnrollmentsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EnrollmentsCountAggregateInputType | true
    }

  export interface EnrollmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollments'], meta: { name: 'Enrollments' } }
    /**
     * Find zero or one Enrollments that matches the filter.
     * @param {EnrollmentsFindUniqueArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnrollmentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EnrollmentsFindUniqueArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Enrollments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnrollmentsFindUniqueOrThrowArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnrollmentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrollmentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindFirstArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnrollmentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrollmentsFindFirstArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Enrollments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindFirstOrThrowArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnrollmentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrollmentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollments.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollments.findMany({ take: 10 })
     * 
     * // Only select the `enrollment_id`
     * const enrollmentsWithEnrollment_idOnly = await prisma.enrollments.findMany({ select: { enrollment_id: true } })
     * 
    **/
    findMany<T extends EnrollmentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrollmentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Enrollments.
     * @param {EnrollmentsCreateArgs} args - Arguments to create a Enrollments.
     * @example
     * // Create one Enrollments
     * const Enrollments = await prisma.enrollments.create({
     *   data: {
     *     // ... data to create a Enrollments
     *   }
     * })
     * 
    **/
    create<T extends EnrollmentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EnrollmentsCreateArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Enrollments.
     *     @param {EnrollmentsCreateManyArgs} args - Arguments to create many Enrollments.
     *     @example
     *     // Create many Enrollments
     *     const enrollments = await prisma.enrollments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnrollmentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrollmentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Enrollments.
     * @param {EnrollmentsDeleteArgs} args - Arguments to delete one Enrollments.
     * @example
     * // Delete one Enrollments
     * const Enrollments = await prisma.enrollments.delete({
     *   where: {
     *     // ... filter to delete one Enrollments
     *   }
     * })
     * 
    **/
    delete<T extends EnrollmentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EnrollmentsDeleteArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Enrollments.
     * @param {EnrollmentsUpdateArgs} args - Arguments to update one Enrollments.
     * @example
     * // Update one Enrollments
     * const enrollments = await prisma.enrollments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnrollmentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EnrollmentsUpdateArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentsDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnrollmentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrollmentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollments = await prisma.enrollments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnrollmentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EnrollmentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollments.
     * @param {EnrollmentsUpsertArgs} args - Arguments to update or create a Enrollments.
     * @example
     * // Update or create a Enrollments
     * const enrollments = await prisma.enrollments.upsert({
     *   create: {
     *     // ... data to create a Enrollments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollments we want to update
     *   }
     * })
    **/
    upsert<T extends EnrollmentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EnrollmentsUpsertArgs<ExtArgs>>
    ): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollments.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentsCountArgs>(
      args?: Subset<T, EnrollmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentsAggregateArgs>(args: Subset<T, EnrollmentsAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentsAggregateType<T>>

    /**
     * Group by Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentsGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollments model
   */
  readonly fields: EnrollmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Enrollments model
   */ 
  interface EnrollmentsFieldRefs {
    readonly enrollment_id: FieldRef<"Enrollments", 'Int'>
    readonly role: FieldRef<"Enrollments", 'Role'>
    readonly total_points: FieldRef<"Enrollments", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Enrollments findUnique
   */
  export type EnrollmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where: EnrollmentsWhereUniqueInput
  }


  /**
   * Enrollments findUniqueOrThrow
   */
  export type EnrollmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where: EnrollmentsWhereUniqueInput
  }


  /**
   * Enrollments findFirst
   */
  export type EnrollmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }


  /**
   * Enrollments findFirstOrThrow
   */
  export type EnrollmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }


  /**
   * Enrollments findMany
   */
  export type EnrollmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }


  /**
   * Enrollments create
   */
  export type EnrollmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollments.
     */
    data: XOR<EnrollmentsCreateInput, EnrollmentsUncheckedCreateInput>
  }


  /**
   * Enrollments createMany
   */
  export type EnrollmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentsCreateManyInput | EnrollmentsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Enrollments update
   */
  export type EnrollmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollments.
     */
    data: XOR<EnrollmentsUpdateInput, EnrollmentsUncheckedUpdateInput>
    /**
     * Choose, which Enrollments to update.
     */
    where: EnrollmentsWhereUniqueInput
  }


  /**
   * Enrollments updateMany
   */
  export type EnrollmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentsWhereInput
  }


  /**
   * Enrollments upsert
   */
  export type EnrollmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollments to update in case it exists.
     */
    where: EnrollmentsWhereUniqueInput
    /**
     * In case the Enrollments found by the `where` argument doesn't exist, create a new Enrollments with this data.
     */
    create: XOR<EnrollmentsCreateInput, EnrollmentsUncheckedCreateInput>
    /**
     * In case the Enrollments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentsUpdateInput, EnrollmentsUncheckedUpdateInput>
  }


  /**
   * Enrollments delete
   */
  export type EnrollmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter which Enrollments to delete.
     */
    where: EnrollmentsWhereUniqueInput
  }


  /**
   * Enrollments deleteMany
   */
  export type EnrollmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentsWhereInput
  }


  /**
   * Enrollments without action
   */
  export type EnrollmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    username: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    password?: boolean
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    submitted_assignments?: boolean | User$submitted_assignmentsArgs<ExtArgs>
    submitted_exercises?: boolean | User$submitted_exercisesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    username?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    submitted_assignments?: boolean | User$submitted_assignmentsArgs<ExtArgs>
    submitted_exercises?: boolean | User$submitted_exercisesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      enrollments: Prisma.$EnrollmentsPayload<ExtArgs>[]
      submitted_assignments: Prisma.$AssignmentSolutionPayload<ExtArgs>[]
      submitted_exercises: Prisma.$ExerciseSolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      username: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    enrollments<T extends User$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'findMany'> | Null>;

    submitted_assignments<T extends User$submitted_assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$submitted_assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'findMany'> | Null>;

    submitted_exercises<T extends User$submitted_exercisesArgs<ExtArgs> = {}>(args?: Subset<T, User$submitted_exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.enrollments
   */
  export type User$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    cursor?: EnrollmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }


  /**
   * User.submitted_assignments
   */
  export type User$submitted_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    where?: AssignmentSolutionWhereInput
    orderBy?: AssignmentSolutionOrderByWithRelationInput | AssignmentSolutionOrderByWithRelationInput[]
    cursor?: AssignmentSolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentSolutionScalarFieldEnum | AssignmentSolutionScalarFieldEnum[]
  }


  /**
   * User.submitted_exercises
   */
  export type User$submitted_exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    where?: ExerciseSolutionWhereInput
    orderBy?: ExerciseSolutionOrderByWithRelationInput | ExerciseSolutionOrderByWithRelationInput[]
    cursor?: ExerciseSolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseSolutionScalarFieldEnum | ExerciseSolutionScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    course_id: number | null
  }

  export type CourseSumAggregateOutputType = {
    course_id: number | null
  }

  export type CourseMinAggregateOutputType = {
    course_id: number | null
    name: string | null
  }

  export type CourseMaxAggregateOutputType = {
    course_id: number | null
    name: string | null
  }

  export type CourseCountAggregateOutputType = {
    course_id: number
    name: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    course_id?: true
  }

  export type CourseSumAggregateInputType = {
    course_id?: true
  }

  export type CourseMinAggregateInputType = {
    course_id?: true
    name?: true
  }

  export type CourseMaxAggregateInputType = {
    course_id?: true
    name?: true
  }

  export type CourseCountAggregateInputType = {
    course_id?: true
    name?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    course_id: number
    name: string
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    name?: boolean
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    sessions?: boolean | Course$sessionsArgs<ExtArgs>
    assignments?: boolean | Course$assignmentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    course_id?: boolean
    name?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    sessions?: boolean | Course$sessionsArgs<ExtArgs>
    assignments?: boolean | Course$assignmentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      enrollments: Prisma.$EnrollmentsPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: number
      name: string
    }, ExtArgs["result"]["course"]>
    composites: {}
  }


  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const courseWithCourse_idOnly = await prisma.course.findMany({ select: { course_id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Courses.
     *     @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    enrollments<T extends Course$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, 'findMany'> | Null>;

    sessions<T extends Course$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Course$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    assignments<T extends Course$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly course_id: FieldRef<"Course", 'Int'>
    readonly name: FieldRef<"Course", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }


  /**
   * Course.enrollments
   */
  export type Course$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    cursor?: EnrollmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }


  /**
   * Course.sessions
   */
  export type Course$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Course.assignments
   */
  export type Course$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }


  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
  }



  /**
   * Model Assignment
   */

  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentAvgAggregateOutputType = {
    assignment_id: number | null
  }

  export type AssignmentSumAggregateOutputType = {
    assignment_id: number | null
  }

  export type AssignmentMinAggregateOutputType = {
    assignment_id: number | null
    name: string | null
    description: string | null
    due_date: Date | null
    language: string | null
  }

  export type AssignmentMaxAggregateOutputType = {
    assignment_id: number | null
    name: string | null
    description: string | null
    due_date: Date | null
    language: string | null
  }

  export type AssignmentCountAggregateOutputType = {
    assignment_id: number
    name: number
    description: number
    due_date: number
    language: number
    _all: number
  }


  export type AssignmentAvgAggregateInputType = {
    assignment_id?: true
  }

  export type AssignmentSumAggregateInputType = {
    assignment_id?: true
  }

  export type AssignmentMinAggregateInputType = {
    assignment_id?: true
    name?: true
    description?: true
    due_date?: true
    language?: true
  }

  export type AssignmentMaxAggregateInputType = {
    assignment_id?: true
    name?: true
    description?: true
    due_date?: true
    language?: true
  }

  export type AssignmentCountAggregateInputType = {
    assignment_id?: true
    name?: true
    description?: true
    due_date?: true
    language?: true
    _all?: true
  }

  export type AssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignment to aggregate.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithAggregationInput | AssignmentOrderByWithAggregationInput[]
    by: AssignmentScalarFieldEnum[] | AssignmentScalarFieldEnum
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _avg?: AssignmentAvgAggregateInputType
    _sum?: AssignmentSumAggregateInputType
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }

  export type AssignmentGroupByOutputType = {
    assignment_id: number
    name: string
    description: string
    due_date: Date
    language: string
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    assignment_id?: boolean
    name?: boolean
    description?: boolean
    due_date?: boolean
    language?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    solutions?: boolean | Assignment$solutionsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectScalar = {
    assignment_id?: boolean
    name?: boolean
    description?: boolean
    due_date?: boolean
    language?: boolean
  }

  export type AssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    solutions?: boolean | Assignment$solutionsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assignment"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      solutions: Prisma.$AssignmentSolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      assignment_id: number
      name: string
      description: string
      due_date: Date
      language: string
    }, ExtArgs["result"]["assignment"]>
    composites: {}
  }


  type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = $Result.GetResult<Prisma.$AssignmentPayload, S>

  type AssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AssignmentCountAggregateInputType | true
    }

  export interface AssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AssignmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Assignment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AssignmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Assignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `assignment_id`
     * const assignmentWithAssignment_idOnly = await prisma.assignment.findMany({ select: { assignment_id: true } })
     * 
    **/
    findMany<T extends AssignmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
    **/
    create<T extends AssignmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentCreateArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Assignments.
     *     @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     *     @example
     *     // Create many Assignments
     *     const assignment = await prisma.assignment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AssignmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
    **/
    delete<T extends AssignmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AssignmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AssignmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AssignmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
    **/
    upsert<T extends AssignmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>
    ): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assignment model
   */
  readonly fields: AssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    solutions<T extends Assignment$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Assignment model
   */ 
  interface AssignmentFieldRefs {
    readonly assignment_id: FieldRef<"Assignment", 'Int'>
    readonly name: FieldRef<"Assignment", 'String'>
    readonly description: FieldRef<"Assignment", 'String'>
    readonly due_date: FieldRef<"Assignment", 'DateTime'>
    readonly language: FieldRef<"Assignment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }


  /**
   * Assignment findUniqueOrThrow
   */
  export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }


  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }


  /**
   * Assignment findFirstOrThrow
   */
  export type AssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }


  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignments to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }


  /**
   * Assignment create
   */
  export type AssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assignment.
     */
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }


  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assignment.
     */
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     */
    where: AssignmentWhereUniqueInput
  }


  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
  }


  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     */
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     */
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }


  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter which Assignment to delete.
     */
    where: AssignmentWhereUniqueInput
  }


  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignments to delete
     */
    where?: AssignmentWhereInput
  }


  /**
   * Assignment.solutions
   */
  export type Assignment$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    where?: AssignmentSolutionWhereInput
    orderBy?: AssignmentSolutionOrderByWithRelationInput | AssignmentSolutionOrderByWithRelationInput[]
    cursor?: AssignmentSolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentSolutionScalarFieldEnum | AssignmentSolutionScalarFieldEnum[]
  }


  /**
   * Assignment without action
   */
  export type AssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentInclude<ExtArgs> | null
  }



  /**
   * Model AssignmentSolution
   */

  export type AggregateAssignmentSolution = {
    _count: AssignmentSolutionCountAggregateOutputType | null
    _avg: AssignmentSolutionAvgAggregateOutputType | null
    _sum: AssignmentSolutionSumAggregateOutputType | null
    _min: AssignmentSolutionMinAggregateOutputType | null
    _max: AssignmentSolutionMaxAggregateOutputType | null
  }

  export type AssignmentSolutionAvgAggregateOutputType = {
    assignment_solution_id: number | null
  }

  export type AssignmentSolutionSumAggregateOutputType = {
    assignment_solution_id: number | null
  }

  export type AssignmentSolutionMinAggregateOutputType = {
    assignment_solution_id: number | null
    solution: string | null
    feedback: string | null
  }

  export type AssignmentSolutionMaxAggregateOutputType = {
    assignment_solution_id: number | null
    solution: string | null
    feedback: string | null
  }

  export type AssignmentSolutionCountAggregateOutputType = {
    assignment_solution_id: number
    solution: number
    feedback: number
    _all: number
  }


  export type AssignmentSolutionAvgAggregateInputType = {
    assignment_solution_id?: true
  }

  export type AssignmentSolutionSumAggregateInputType = {
    assignment_solution_id?: true
  }

  export type AssignmentSolutionMinAggregateInputType = {
    assignment_solution_id?: true
    solution?: true
    feedback?: true
  }

  export type AssignmentSolutionMaxAggregateInputType = {
    assignment_solution_id?: true
    solution?: true
    feedback?: true
  }

  export type AssignmentSolutionCountAggregateInputType = {
    assignment_solution_id?: true
    solution?: true
    feedback?: true
    _all?: true
  }

  export type AssignmentSolutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssignmentSolution to aggregate.
     */
    where?: AssignmentSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSolutions to fetch.
     */
    orderBy?: AssignmentSolutionOrderByWithRelationInput | AssignmentSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssignmentSolutions
    **/
    _count?: true | AssignmentSolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentSolutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentSolutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentSolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentSolutionMaxAggregateInputType
  }

  export type GetAssignmentSolutionAggregateType<T extends AssignmentSolutionAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignmentSolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignmentSolution[P]>
      : GetScalarType<T[P], AggregateAssignmentSolution[P]>
  }




  export type AssignmentSolutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentSolutionWhereInput
    orderBy?: AssignmentSolutionOrderByWithAggregationInput | AssignmentSolutionOrderByWithAggregationInput[]
    by: AssignmentSolutionScalarFieldEnum[] | AssignmentSolutionScalarFieldEnum
    having?: AssignmentSolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentSolutionCountAggregateInputType | true
    _avg?: AssignmentSolutionAvgAggregateInputType
    _sum?: AssignmentSolutionSumAggregateInputType
    _min?: AssignmentSolutionMinAggregateInputType
    _max?: AssignmentSolutionMaxAggregateInputType
  }

  export type AssignmentSolutionGroupByOutputType = {
    assignment_solution_id: number
    solution: string
    feedback: string
    _count: AssignmentSolutionCountAggregateOutputType | null
    _avg: AssignmentSolutionAvgAggregateOutputType | null
    _sum: AssignmentSolutionSumAggregateOutputType | null
    _min: AssignmentSolutionMinAggregateOutputType | null
    _max: AssignmentSolutionMaxAggregateOutputType | null
  }

  type GetAssignmentSolutionGroupByPayload<T extends AssignmentSolutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentSolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentSolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentSolutionGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentSolutionGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSolutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    assignment_solution_id?: boolean
    solution?: boolean
    feedback?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignmentSolution"]>

  export type AssignmentSolutionSelectScalar = {
    assignment_solution_id?: boolean
    solution?: boolean
    feedback?: boolean
  }

  export type AssignmentSolutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AssignmentSolutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssignmentSolution"
    objects: {
      assignment: Prisma.$AssignmentPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      assignment_solution_id: number
      solution: string
      feedback: string
    }, ExtArgs["result"]["assignmentSolution"]>
    composites: {}
  }


  type AssignmentSolutionGetPayload<S extends boolean | null | undefined | AssignmentSolutionDefaultArgs> = $Result.GetResult<Prisma.$AssignmentSolutionPayload, S>

  type AssignmentSolutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssignmentSolutionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AssignmentSolutionCountAggregateInputType | true
    }

  export interface AssignmentSolutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssignmentSolution'], meta: { name: 'AssignmentSolution' } }
    /**
     * Find zero or one AssignmentSolution that matches the filter.
     * @param {AssignmentSolutionFindUniqueArgs} args - Arguments to find a AssignmentSolution
     * @example
     * // Get one AssignmentSolution
     * const assignmentSolution = await prisma.assignmentSolution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AssignmentSolutionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentSolutionFindUniqueArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AssignmentSolution that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AssignmentSolutionFindUniqueOrThrowArgs} args - Arguments to find a AssignmentSolution
     * @example
     * // Get one AssignmentSolution
     * const assignmentSolution = await prisma.assignmentSolution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AssignmentSolutionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentSolutionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AssignmentSolution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSolutionFindFirstArgs} args - Arguments to find a AssignmentSolution
     * @example
     * // Get one AssignmentSolution
     * const assignmentSolution = await prisma.assignmentSolution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AssignmentSolutionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentSolutionFindFirstArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AssignmentSolution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSolutionFindFirstOrThrowArgs} args - Arguments to find a AssignmentSolution
     * @example
     * // Get one AssignmentSolution
     * const assignmentSolution = await prisma.assignmentSolution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AssignmentSolutionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentSolutionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AssignmentSolutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSolutionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssignmentSolutions
     * const assignmentSolutions = await prisma.assignmentSolution.findMany()
     * 
     * // Get first 10 AssignmentSolutions
     * const assignmentSolutions = await prisma.assignmentSolution.findMany({ take: 10 })
     * 
     * // Only select the `assignment_solution_id`
     * const assignmentSolutionWithAssignment_solution_idOnly = await prisma.assignmentSolution.findMany({ select: { assignment_solution_id: true } })
     * 
    **/
    findMany<T extends AssignmentSolutionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentSolutionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AssignmentSolution.
     * @param {AssignmentSolutionCreateArgs} args - Arguments to create a AssignmentSolution.
     * @example
     * // Create one AssignmentSolution
     * const AssignmentSolution = await prisma.assignmentSolution.create({
     *   data: {
     *     // ... data to create a AssignmentSolution
     *   }
     * })
     * 
    **/
    create<T extends AssignmentSolutionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentSolutionCreateArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AssignmentSolutions.
     *     @param {AssignmentSolutionCreateManyArgs} args - Arguments to create many AssignmentSolutions.
     *     @example
     *     // Create many AssignmentSolutions
     *     const assignmentSolution = await prisma.assignmentSolution.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AssignmentSolutionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentSolutionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AssignmentSolution.
     * @param {AssignmentSolutionDeleteArgs} args - Arguments to delete one AssignmentSolution.
     * @example
     * // Delete one AssignmentSolution
     * const AssignmentSolution = await prisma.assignmentSolution.delete({
     *   where: {
     *     // ... filter to delete one AssignmentSolution
     *   }
     * })
     * 
    **/
    delete<T extends AssignmentSolutionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentSolutionDeleteArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AssignmentSolution.
     * @param {AssignmentSolutionUpdateArgs} args - Arguments to update one AssignmentSolution.
     * @example
     * // Update one AssignmentSolution
     * const assignmentSolution = await prisma.assignmentSolution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AssignmentSolutionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentSolutionUpdateArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AssignmentSolutions.
     * @param {AssignmentSolutionDeleteManyArgs} args - Arguments to filter AssignmentSolutions to delete.
     * @example
     * // Delete a few AssignmentSolutions
     * const { count } = await prisma.assignmentSolution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AssignmentSolutionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssignmentSolutionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssignmentSolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssignmentSolutions
     * const assignmentSolution = await prisma.assignmentSolution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AssignmentSolutionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentSolutionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssignmentSolution.
     * @param {AssignmentSolutionUpsertArgs} args - Arguments to update or create a AssignmentSolution.
     * @example
     * // Update or create a AssignmentSolution
     * const assignmentSolution = await prisma.assignmentSolution.upsert({
     *   create: {
     *     // ... data to create a AssignmentSolution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssignmentSolution we want to update
     *   }
     * })
    **/
    upsert<T extends AssignmentSolutionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AssignmentSolutionUpsertArgs<ExtArgs>>
    ): Prisma__AssignmentSolutionClient<$Result.GetResult<Prisma.$AssignmentSolutionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AssignmentSolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSolutionCountArgs} args - Arguments to filter AssignmentSolutions to count.
     * @example
     * // Count the number of AssignmentSolutions
     * const count = await prisma.assignmentSolution.count({
     *   where: {
     *     // ... the filter for the AssignmentSolutions we want to count
     *   }
     * })
    **/
    count<T extends AssignmentSolutionCountArgs>(
      args?: Subset<T, AssignmentSolutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentSolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssignmentSolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentSolutionAggregateArgs>(args: Subset<T, AssignmentSolutionAggregateArgs>): Prisma.PrismaPromise<GetAssignmentSolutionAggregateType<T>>

    /**
     * Group by AssignmentSolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentSolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentSolutionGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentSolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentSolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentSolutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssignmentSolution model
   */
  readonly fields: AssignmentSolutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssignmentSolution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentSolutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    assignment<T extends AssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentDefaultArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AssignmentSolution model
   */ 
  interface AssignmentSolutionFieldRefs {
    readonly assignment_solution_id: FieldRef<"AssignmentSolution", 'Int'>
    readonly solution: FieldRef<"AssignmentSolution", 'String'>
    readonly feedback: FieldRef<"AssignmentSolution", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AssignmentSolution findUnique
   */
  export type AssignmentSolutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSolution to fetch.
     */
    where: AssignmentSolutionWhereUniqueInput
  }


  /**
   * AssignmentSolution findUniqueOrThrow
   */
  export type AssignmentSolutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSolution to fetch.
     */
    where: AssignmentSolutionWhereUniqueInput
  }


  /**
   * AssignmentSolution findFirst
   */
  export type AssignmentSolutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSolution to fetch.
     */
    where?: AssignmentSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSolutions to fetch.
     */
    orderBy?: AssignmentSolutionOrderByWithRelationInput | AssignmentSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssignmentSolutions.
     */
    cursor?: AssignmentSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssignmentSolutions.
     */
    distinct?: AssignmentSolutionScalarFieldEnum | AssignmentSolutionScalarFieldEnum[]
  }


  /**
   * AssignmentSolution findFirstOrThrow
   */
  export type AssignmentSolutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSolution to fetch.
     */
    where?: AssignmentSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSolutions to fetch.
     */
    orderBy?: AssignmentSolutionOrderByWithRelationInput | AssignmentSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssignmentSolutions.
     */
    cursor?: AssignmentSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssignmentSolutions.
     */
    distinct?: AssignmentSolutionScalarFieldEnum | AssignmentSolutionScalarFieldEnum[]
  }


  /**
   * AssignmentSolution findMany
   */
  export type AssignmentSolutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSolutions to fetch.
     */
    where?: AssignmentSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSolutions to fetch.
     */
    orderBy?: AssignmentSolutionOrderByWithRelationInput | AssignmentSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssignmentSolutions.
     */
    cursor?: AssignmentSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSolutions.
     */
    skip?: number
    distinct?: AssignmentSolutionScalarFieldEnum | AssignmentSolutionScalarFieldEnum[]
  }


  /**
   * AssignmentSolution create
   */
  export type AssignmentSolutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * The data needed to create a AssignmentSolution.
     */
    data: XOR<AssignmentSolutionCreateInput, AssignmentSolutionUncheckedCreateInput>
  }


  /**
   * AssignmentSolution createMany
   */
  export type AssignmentSolutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssignmentSolutions.
     */
    data: AssignmentSolutionCreateManyInput | AssignmentSolutionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AssignmentSolution update
   */
  export type AssignmentSolutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * The data needed to update a AssignmentSolution.
     */
    data: XOR<AssignmentSolutionUpdateInput, AssignmentSolutionUncheckedUpdateInput>
    /**
     * Choose, which AssignmentSolution to update.
     */
    where: AssignmentSolutionWhereUniqueInput
  }


  /**
   * AssignmentSolution updateMany
   */
  export type AssignmentSolutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssignmentSolutions.
     */
    data: XOR<AssignmentSolutionUpdateManyMutationInput, AssignmentSolutionUncheckedUpdateManyInput>
    /**
     * Filter which AssignmentSolutions to update
     */
    where?: AssignmentSolutionWhereInput
  }


  /**
   * AssignmentSolution upsert
   */
  export type AssignmentSolutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * The filter to search for the AssignmentSolution to update in case it exists.
     */
    where: AssignmentSolutionWhereUniqueInput
    /**
     * In case the AssignmentSolution found by the `where` argument doesn't exist, create a new AssignmentSolution with this data.
     */
    create: XOR<AssignmentSolutionCreateInput, AssignmentSolutionUncheckedCreateInput>
    /**
     * In case the AssignmentSolution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentSolutionUpdateInput, AssignmentSolutionUncheckedUpdateInput>
  }


  /**
   * AssignmentSolution delete
   */
  export type AssignmentSolutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
    /**
     * Filter which AssignmentSolution to delete.
     */
    where: AssignmentSolutionWhereUniqueInput
  }


  /**
   * AssignmentSolution deleteMany
   */
  export type AssignmentSolutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssignmentSolutions to delete
     */
    where?: AssignmentSolutionWhereInput
  }


  /**
   * AssignmentSolution without action
   */
  export type AssignmentSolutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSolution
     */
    select?: AssignmentSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssignmentSolutionInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    session_id: number | null
  }

  export type SessionSumAggregateOutputType = {
    session_id: number | null
  }

  export type SessionMinAggregateOutputType = {
    session_id: number | null
    name: string | null
  }

  export type SessionMaxAggregateOutputType = {
    session_id: number | null
    name: string | null
  }

  export type SessionCountAggregateOutputType = {
    session_id: number
    name: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    session_id?: true
  }

  export type SessionSumAggregateInputType = {
    session_id?: true
  }

  export type SessionMinAggregateInputType = {
    session_id?: true
    name?: true
  }

  export type SessionMaxAggregateInputType = {
    session_id?: true
    name?: true
  }

  export type SessionCountAggregateInputType = {
    session_id?: true
    name?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    session_id: number
    name: string
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    session_id?: boolean
    name?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    exercises?: boolean | Session$exercisesArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    session_id?: boolean
    name?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    exercises?: boolean | Session$exercisesArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      session_id: number
      name: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `session_id`
     * const sessionWithSession_idOnly = await prisma.session.findMany({ select: { session_id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    exercises<T extends Session$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Session$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly session_id: FieldRef<"Session", 'Int'>
    readonly name: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session.exercises
   */
  export type Session$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    exercise_id: number | null
    points: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    exercise_id: number | null
    points: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    exercise_id: number | null
    name: string | null
    description: string | null
    points: number | null
    language: string | null
    code_template: string | null
  }

  export type ExerciseMaxAggregateOutputType = {
    exercise_id: number | null
    name: string | null
    description: string | null
    points: number | null
    language: string | null
    code_template: string | null
  }

  export type ExerciseCountAggregateOutputType = {
    exercise_id: number
    name: number
    description: number
    points: number
    language: number
    code_template: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    exercise_id?: true
    points?: true
  }

  export type ExerciseSumAggregateInputType = {
    exercise_id?: true
    points?: true
  }

  export type ExerciseMinAggregateInputType = {
    exercise_id?: true
    name?: true
    description?: true
    points?: true
    language?: true
    code_template?: true
  }

  export type ExerciseMaxAggregateInputType = {
    exercise_id?: true
    name?: true
    description?: true
    points?: true
    language?: true
    code_template?: true
  }

  export type ExerciseCountAggregateInputType = {
    exercise_id?: true
    name?: true
    description?: true
    points?: true
    language?: true
    code_template?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    exercise_id: number
    name: string
    description: string
    points: number
    language: string
    code_template: string
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    exercise_id?: boolean
    name?: boolean
    description?: boolean
    points?: boolean
    language?: boolean
    code_template?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    test_case?: boolean | Exercise$test_caseArgs<ExtArgs>
    hints?: boolean | Exercise$hintsArgs<ExtArgs>
    solutions?: boolean | Exercise$solutionsArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    exercise_id?: boolean
    name?: boolean
    description?: boolean
    points?: boolean
    language?: boolean
    code_template?: boolean
  }

  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    test_case?: boolean | Exercise$test_caseArgs<ExtArgs>
    hints?: boolean | Exercise$hintsArgs<ExtArgs>
    solutions?: boolean | Exercise$solutionsArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      test_case: Prisma.$TestCasePayload<ExtArgs>[]
      hints: Prisma.$HintPayload<ExtArgs>[]
      solutions: Prisma.$ExerciseSolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      exercise_id: number
      name: string
      description: string
      points: number
      language: string
      code_template: string
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }


  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercise that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `exercise_id`
     * const exerciseWithExercise_idOnly = await prisma.exercise.findMany({ select: { exercise_id: true } })
     * 
    **/
    findMany<T extends ExerciseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
    **/
    create<T extends ExerciseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercises.
     *     @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     *     @example
     *     // Create many Exercises
     *     const exercise = await prisma.exercise.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExerciseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    test_case<T extends Exercise$test_caseArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$test_caseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'findMany'> | Null>;

    hints<T extends Exercise$hintsArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$hintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'findMany'> | Null>;

    solutions<T extends Exercise$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercise model
   */ 
  interface ExerciseFieldRefs {
    readonly exercise_id: FieldRef<"Exercise", 'Int'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly description: FieldRef<"Exercise", 'String'>
    readonly points: FieldRef<"Exercise", 'Int'>
    readonly language: FieldRef<"Exercise", 'String'>
    readonly code_template: FieldRef<"Exercise", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }


  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
  }


  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }


  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
  }


  /**
   * Exercise.test_case
   */
  export type Exercise$test_caseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    where?: TestCaseWhereInput
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    cursor?: TestCaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestCaseScalarFieldEnum | TestCaseScalarFieldEnum[]
  }


  /**
   * Exercise.hints
   */
  export type Exercise$hintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    where?: HintWhereInput
    orderBy?: HintOrderByWithRelationInput | HintOrderByWithRelationInput[]
    cursor?: HintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HintScalarFieldEnum | HintScalarFieldEnum[]
  }


  /**
   * Exercise.solutions
   */
  export type Exercise$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    where?: ExerciseSolutionWhereInput
    orderBy?: ExerciseSolutionOrderByWithRelationInput | ExerciseSolutionOrderByWithRelationInput[]
    cursor?: ExerciseSolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseSolutionScalarFieldEnum | ExerciseSolutionScalarFieldEnum[]
  }


  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
  }



  /**
   * Model TestCase
   */

  export type AggregateTestCase = {
    _count: TestCaseCountAggregateOutputType | null
    _avg: TestCaseAvgAggregateOutputType | null
    _sum: TestCaseSumAggregateOutputType | null
    _min: TestCaseMinAggregateOutputType | null
    _max: TestCaseMaxAggregateOutputType | null
  }

  export type TestCaseAvgAggregateOutputType = {
    test_case_id: number | null
  }

  export type TestCaseSumAggregateOutputType = {
    test_case_id: number | null
  }

  export type TestCaseMinAggregateOutputType = {
    test_case_id: number | null
    code: string | null
    is_visible: boolean | null
  }

  export type TestCaseMaxAggregateOutputType = {
    test_case_id: number | null
    code: string | null
    is_visible: boolean | null
  }

  export type TestCaseCountAggregateOutputType = {
    test_case_id: number
    code: number
    is_visible: number
    _all: number
  }


  export type TestCaseAvgAggregateInputType = {
    test_case_id?: true
  }

  export type TestCaseSumAggregateInputType = {
    test_case_id?: true
  }

  export type TestCaseMinAggregateInputType = {
    test_case_id?: true
    code?: true
    is_visible?: true
  }

  export type TestCaseMaxAggregateInputType = {
    test_case_id?: true
    code?: true
    is_visible?: true
  }

  export type TestCaseCountAggregateInputType = {
    test_case_id?: true
    code?: true
    is_visible?: true
    _all?: true
  }

  export type TestCaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCase to aggregate.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestCases
    **/
    _count?: true | TestCaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestCaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestCaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestCaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestCaseMaxAggregateInputType
  }

  export type GetTestCaseAggregateType<T extends TestCaseAggregateArgs> = {
        [P in keyof T & keyof AggregateTestCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestCase[P]>
      : GetScalarType<T[P], AggregateTestCase[P]>
  }




  export type TestCaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseWhereInput
    orderBy?: TestCaseOrderByWithAggregationInput | TestCaseOrderByWithAggregationInput[]
    by: TestCaseScalarFieldEnum[] | TestCaseScalarFieldEnum
    having?: TestCaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCaseCountAggregateInputType | true
    _avg?: TestCaseAvgAggregateInputType
    _sum?: TestCaseSumAggregateInputType
    _min?: TestCaseMinAggregateInputType
    _max?: TestCaseMaxAggregateInputType
  }

  export type TestCaseGroupByOutputType = {
    test_case_id: number
    code: string
    is_visible: boolean
    _count: TestCaseCountAggregateOutputType | null
    _avg: TestCaseAvgAggregateOutputType | null
    _sum: TestCaseSumAggregateOutputType | null
    _min: TestCaseMinAggregateOutputType | null
    _max: TestCaseMaxAggregateOutputType | null
  }

  type GetTestCaseGroupByPayload<T extends TestCaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestCaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestCaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestCaseGroupByOutputType[P]>
            : GetScalarType<T[P], TestCaseGroupByOutputType[P]>
        }
      >
    >


  export type TestCaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    test_case_id?: boolean
    code?: boolean
    is_visible?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCase"]>

  export type TestCaseSelectScalar = {
    test_case_id?: boolean
    code?: boolean
    is_visible?: boolean
  }

  export type TestCaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }


  export type $TestCasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestCase"
    objects: {
      exercise: Prisma.$ExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      test_case_id: number
      code: string
      is_visible: boolean
    }, ExtArgs["result"]["testCase"]>
    composites: {}
  }


  type TestCaseGetPayload<S extends boolean | null | undefined | TestCaseDefaultArgs> = $Result.GetResult<Prisma.$TestCasePayload, S>

  type TestCaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TestCaseFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TestCaseCountAggregateInputType | true
    }

  export interface TestCaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCase'], meta: { name: 'TestCase' } }
    /**
     * Find zero or one TestCase that matches the filter.
     * @param {TestCaseFindUniqueArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TestCaseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TestCaseFindUniqueArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TestCase that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TestCaseFindUniqueOrThrowArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TestCaseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TestCaseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TestCase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseFindFirstArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TestCaseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TestCaseFindFirstArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TestCase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseFindFirstOrThrowArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TestCaseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TestCaseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TestCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestCases
     * const testCases = await prisma.testCase.findMany()
     * 
     * // Get first 10 TestCases
     * const testCases = await prisma.testCase.findMany({ take: 10 })
     * 
     * // Only select the `test_case_id`
     * const testCaseWithTest_case_idOnly = await prisma.testCase.findMany({ select: { test_case_id: true } })
     * 
    **/
    findMany<T extends TestCaseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TestCaseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TestCase.
     * @param {TestCaseCreateArgs} args - Arguments to create a TestCase.
     * @example
     * // Create one TestCase
     * const TestCase = await prisma.testCase.create({
     *   data: {
     *     // ... data to create a TestCase
     *   }
     * })
     * 
    **/
    create<T extends TestCaseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TestCaseCreateArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TestCases.
     *     @param {TestCaseCreateManyArgs} args - Arguments to create many TestCases.
     *     @example
     *     // Create many TestCases
     *     const testCase = await prisma.testCase.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TestCaseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TestCaseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TestCase.
     * @param {TestCaseDeleteArgs} args - Arguments to delete one TestCase.
     * @example
     * // Delete one TestCase
     * const TestCase = await prisma.testCase.delete({
     *   where: {
     *     // ... filter to delete one TestCase
     *   }
     * })
     * 
    **/
    delete<T extends TestCaseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TestCaseDeleteArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TestCase.
     * @param {TestCaseUpdateArgs} args - Arguments to update one TestCase.
     * @example
     * // Update one TestCase
     * const testCase = await prisma.testCase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TestCaseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TestCaseUpdateArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TestCases.
     * @param {TestCaseDeleteManyArgs} args - Arguments to filter TestCases to delete.
     * @example
     * // Delete a few TestCases
     * const { count } = await prisma.testCase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TestCaseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TestCaseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestCases
     * const testCase = await prisma.testCase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TestCaseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TestCaseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestCase.
     * @param {TestCaseUpsertArgs} args - Arguments to update or create a TestCase.
     * @example
     * // Update or create a TestCase
     * const testCase = await prisma.testCase.upsert({
     *   create: {
     *     // ... data to create a TestCase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestCase we want to update
     *   }
     * })
    **/
    upsert<T extends TestCaseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TestCaseUpsertArgs<ExtArgs>>
    ): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseCountArgs} args - Arguments to filter TestCases to count.
     * @example
     * // Count the number of TestCases
     * const count = await prisma.testCase.count({
     *   where: {
     *     // ... the filter for the TestCases we want to count
     *   }
     * })
    **/
    count<T extends TestCaseCountArgs>(
      args?: Subset<T, TestCaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestCaseAggregateArgs>(args: Subset<T, TestCaseAggregateArgs>): Prisma.PrismaPromise<GetTestCaseAggregateType<T>>

    /**
     * Group by TestCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestCaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestCaseGroupByArgs['orderBy'] }
        : { orderBy?: TestCaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestCaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestCase model
   */
  readonly fields: TestCaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestCase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestCaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TestCase model
   */ 
  interface TestCaseFieldRefs {
    readonly test_case_id: FieldRef<"TestCase", 'Int'>
    readonly code: FieldRef<"TestCase", 'String'>
    readonly is_visible: FieldRef<"TestCase", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * TestCase findUnique
   */
  export type TestCaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where: TestCaseWhereUniqueInput
  }


  /**
   * TestCase findUniqueOrThrow
   */
  export type TestCaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where: TestCaseWhereUniqueInput
  }


  /**
   * TestCase findFirst
   */
  export type TestCaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCases.
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCases.
     */
    distinct?: TestCaseScalarFieldEnum | TestCaseScalarFieldEnum[]
  }


  /**
   * TestCase findFirstOrThrow
   */
  export type TestCaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCases.
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCases.
     */
    distinct?: TestCaseScalarFieldEnum | TestCaseScalarFieldEnum[]
  }


  /**
   * TestCase findMany
   */
  export type TestCaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCases to fetch.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestCases.
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    distinct?: TestCaseScalarFieldEnum | TestCaseScalarFieldEnum[]
  }


  /**
   * TestCase create
   */
  export type TestCaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * The data needed to create a TestCase.
     */
    data: XOR<TestCaseCreateInput, TestCaseUncheckedCreateInput>
  }


  /**
   * TestCase createMany
   */
  export type TestCaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestCases.
     */
    data: TestCaseCreateManyInput | TestCaseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TestCase update
   */
  export type TestCaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * The data needed to update a TestCase.
     */
    data: XOR<TestCaseUpdateInput, TestCaseUncheckedUpdateInput>
    /**
     * Choose, which TestCase to update.
     */
    where: TestCaseWhereUniqueInput
  }


  /**
   * TestCase updateMany
   */
  export type TestCaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestCases.
     */
    data: XOR<TestCaseUpdateManyMutationInput, TestCaseUncheckedUpdateManyInput>
    /**
     * Filter which TestCases to update
     */
    where?: TestCaseWhereInput
  }


  /**
   * TestCase upsert
   */
  export type TestCaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * The filter to search for the TestCase to update in case it exists.
     */
    where: TestCaseWhereUniqueInput
    /**
     * In case the TestCase found by the `where` argument doesn't exist, create a new TestCase with this data.
     */
    create: XOR<TestCaseCreateInput, TestCaseUncheckedCreateInput>
    /**
     * In case the TestCase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestCaseUpdateInput, TestCaseUncheckedUpdateInput>
  }


  /**
   * TestCase delete
   */
  export type TestCaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter which TestCase to delete.
     */
    where: TestCaseWhereUniqueInput
  }


  /**
   * TestCase deleteMany
   */
  export type TestCaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCases to delete
     */
    where?: TestCaseWhereInput
  }


  /**
   * TestCase without action
   */
  export type TestCaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TestCaseInclude<ExtArgs> | null
  }



  /**
   * Model Hint
   */

  export type AggregateHint = {
    _count: HintCountAggregateOutputType | null
    _avg: HintAvgAggregateOutputType | null
    _sum: HintSumAggregateOutputType | null
    _min: HintMinAggregateOutputType | null
    _max: HintMaxAggregateOutputType | null
  }

  export type HintAvgAggregateOutputType = {
    hint_id: number | null
    order: number | null
  }

  export type HintSumAggregateOutputType = {
    hint_id: number | null
    order: number | null
  }

  export type HintMinAggregateOutputType = {
    hint_id: number | null
    description: string | null
    order: number | null
  }

  export type HintMaxAggregateOutputType = {
    hint_id: number | null
    description: string | null
    order: number | null
  }

  export type HintCountAggregateOutputType = {
    hint_id: number
    description: number
    order: number
    _all: number
  }


  export type HintAvgAggregateInputType = {
    hint_id?: true
    order?: true
  }

  export type HintSumAggregateInputType = {
    hint_id?: true
    order?: true
  }

  export type HintMinAggregateInputType = {
    hint_id?: true
    description?: true
    order?: true
  }

  export type HintMaxAggregateInputType = {
    hint_id?: true
    description?: true
    order?: true
  }

  export type HintCountAggregateInputType = {
    hint_id?: true
    description?: true
    order?: true
    _all?: true
  }

  export type HintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hint to aggregate.
     */
    where?: HintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hints to fetch.
     */
    orderBy?: HintOrderByWithRelationInput | HintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hints
    **/
    _count?: true | HintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HintMaxAggregateInputType
  }

  export type GetHintAggregateType<T extends HintAggregateArgs> = {
        [P in keyof T & keyof AggregateHint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHint[P]>
      : GetScalarType<T[P], AggregateHint[P]>
  }




  export type HintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HintWhereInput
    orderBy?: HintOrderByWithAggregationInput | HintOrderByWithAggregationInput[]
    by: HintScalarFieldEnum[] | HintScalarFieldEnum
    having?: HintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HintCountAggregateInputType | true
    _avg?: HintAvgAggregateInputType
    _sum?: HintSumAggregateInputType
    _min?: HintMinAggregateInputType
    _max?: HintMaxAggregateInputType
  }

  export type HintGroupByOutputType = {
    hint_id: number
    description: string
    order: number
    _count: HintCountAggregateOutputType | null
    _avg: HintAvgAggregateOutputType | null
    _sum: HintSumAggregateOutputType | null
    _min: HintMinAggregateOutputType | null
    _max: HintMaxAggregateOutputType | null
  }

  type GetHintGroupByPayload<T extends HintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HintGroupByOutputType[P]>
            : GetScalarType<T[P], HintGroupByOutputType[P]>
        }
      >
    >


  export type HintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    hint_id?: boolean
    description?: boolean
    order?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hint"]>

  export type HintSelectScalar = {
    hint_id?: boolean
    description?: boolean
    order?: boolean
  }

  export type HintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }


  export type $HintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hint"
    objects: {
      exercise: Prisma.$ExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      hint_id: number
      description: string
      order: number
    }, ExtArgs["result"]["hint"]>
    composites: {}
  }


  type HintGetPayload<S extends boolean | null | undefined | HintDefaultArgs> = $Result.GetResult<Prisma.$HintPayload, S>

  type HintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HintFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HintCountAggregateInputType | true
    }

  export interface HintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hint'], meta: { name: 'Hint' } }
    /**
     * Find zero or one Hint that matches the filter.
     * @param {HintFindUniqueArgs} args - Arguments to find a Hint
     * @example
     * // Get one Hint
     * const hint = await prisma.hint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HintFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HintFindUniqueArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Hint that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HintFindUniqueOrThrowArgs} args - Arguments to find a Hint
     * @example
     * // Get one Hint
     * const hint = await prisma.hint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HintFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HintFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Hint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HintFindFirstArgs} args - Arguments to find a Hint
     * @example
     * // Get one Hint
     * const hint = await prisma.hint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HintFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HintFindFirstArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Hint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HintFindFirstOrThrowArgs} args - Arguments to find a Hint
     * @example
     * // Get one Hint
     * const hint = await prisma.hint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HintFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HintFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Hints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HintFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hints
     * const hints = await prisma.hint.findMany()
     * 
     * // Get first 10 Hints
     * const hints = await prisma.hint.findMany({ take: 10 })
     * 
     * // Only select the `hint_id`
     * const hintWithHint_idOnly = await prisma.hint.findMany({ select: { hint_id: true } })
     * 
    **/
    findMany<T extends HintFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HintFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Hint.
     * @param {HintCreateArgs} args - Arguments to create a Hint.
     * @example
     * // Create one Hint
     * const Hint = await prisma.hint.create({
     *   data: {
     *     // ... data to create a Hint
     *   }
     * })
     * 
    **/
    create<T extends HintCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HintCreateArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Hints.
     *     @param {HintCreateManyArgs} args - Arguments to create many Hints.
     *     @example
     *     // Create many Hints
     *     const hint = await prisma.hint.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HintCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HintCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hint.
     * @param {HintDeleteArgs} args - Arguments to delete one Hint.
     * @example
     * // Delete one Hint
     * const Hint = await prisma.hint.delete({
     *   where: {
     *     // ... filter to delete one Hint
     *   }
     * })
     * 
    **/
    delete<T extends HintDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HintDeleteArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Hint.
     * @param {HintUpdateArgs} args - Arguments to update one Hint.
     * @example
     * // Update one Hint
     * const hint = await prisma.hint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HintUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HintUpdateArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Hints.
     * @param {HintDeleteManyArgs} args - Arguments to filter Hints to delete.
     * @example
     * // Delete a few Hints
     * const { count } = await prisma.hint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HintDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HintDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hints
     * const hint = await prisma.hint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HintUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HintUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hint.
     * @param {HintUpsertArgs} args - Arguments to update or create a Hint.
     * @example
     * // Update or create a Hint
     * const hint = await prisma.hint.upsert({
     *   create: {
     *     // ... data to create a Hint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hint we want to update
     *   }
     * })
    **/
    upsert<T extends HintUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HintUpsertArgs<ExtArgs>>
    ): Prisma__HintClient<$Result.GetResult<Prisma.$HintPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Hints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HintCountArgs} args - Arguments to filter Hints to count.
     * @example
     * // Count the number of Hints
     * const count = await prisma.hint.count({
     *   where: {
     *     // ... the filter for the Hints we want to count
     *   }
     * })
    **/
    count<T extends HintCountArgs>(
      args?: Subset<T, HintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HintAggregateArgs>(args: Subset<T, HintAggregateArgs>): Prisma.PrismaPromise<GetHintAggregateType<T>>

    /**
     * Group by Hint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HintGroupByArgs['orderBy'] }
        : { orderBy?: HintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hint model
   */
  readonly fields: HintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Hint model
   */ 
  interface HintFieldRefs {
    readonly hint_id: FieldRef<"Hint", 'Int'>
    readonly description: FieldRef<"Hint", 'String'>
    readonly order: FieldRef<"Hint", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Hint findUnique
   */
  export type HintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * Filter, which Hint to fetch.
     */
    where: HintWhereUniqueInput
  }


  /**
   * Hint findUniqueOrThrow
   */
  export type HintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * Filter, which Hint to fetch.
     */
    where: HintWhereUniqueInput
  }


  /**
   * Hint findFirst
   */
  export type HintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * Filter, which Hint to fetch.
     */
    where?: HintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hints to fetch.
     */
    orderBy?: HintOrderByWithRelationInput | HintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hints.
     */
    cursor?: HintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hints.
     */
    distinct?: HintScalarFieldEnum | HintScalarFieldEnum[]
  }


  /**
   * Hint findFirstOrThrow
   */
  export type HintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * Filter, which Hint to fetch.
     */
    where?: HintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hints to fetch.
     */
    orderBy?: HintOrderByWithRelationInput | HintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hints.
     */
    cursor?: HintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hints.
     */
    distinct?: HintScalarFieldEnum | HintScalarFieldEnum[]
  }


  /**
   * Hint findMany
   */
  export type HintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * Filter, which Hints to fetch.
     */
    where?: HintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hints to fetch.
     */
    orderBy?: HintOrderByWithRelationInput | HintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hints.
     */
    cursor?: HintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hints.
     */
    skip?: number
    distinct?: HintScalarFieldEnum | HintScalarFieldEnum[]
  }


  /**
   * Hint create
   */
  export type HintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * The data needed to create a Hint.
     */
    data: XOR<HintCreateInput, HintUncheckedCreateInput>
  }


  /**
   * Hint createMany
   */
  export type HintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hints.
     */
    data: HintCreateManyInput | HintCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Hint update
   */
  export type HintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * The data needed to update a Hint.
     */
    data: XOR<HintUpdateInput, HintUncheckedUpdateInput>
    /**
     * Choose, which Hint to update.
     */
    where: HintWhereUniqueInput
  }


  /**
   * Hint updateMany
   */
  export type HintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hints.
     */
    data: XOR<HintUpdateManyMutationInput, HintUncheckedUpdateManyInput>
    /**
     * Filter which Hints to update
     */
    where?: HintWhereInput
  }


  /**
   * Hint upsert
   */
  export type HintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * The filter to search for the Hint to update in case it exists.
     */
    where: HintWhereUniqueInput
    /**
     * In case the Hint found by the `where` argument doesn't exist, create a new Hint with this data.
     */
    create: XOR<HintCreateInput, HintUncheckedCreateInput>
    /**
     * In case the Hint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HintUpdateInput, HintUncheckedUpdateInput>
  }


  /**
   * Hint delete
   */
  export type HintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
    /**
     * Filter which Hint to delete.
     */
    where: HintWhereUniqueInput
  }


  /**
   * Hint deleteMany
   */
  export type HintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hints to delete
     */
    where?: HintWhereInput
  }


  /**
   * Hint without action
   */
  export type HintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hint
     */
    select?: HintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HintInclude<ExtArgs> | null
  }



  /**
   * Model ExerciseSolution
   */

  export type AggregateExerciseSolution = {
    _count: ExerciseSolutionCountAggregateOutputType | null
    _avg: ExerciseSolutionAvgAggregateOutputType | null
    _sum: ExerciseSolutionSumAggregateOutputType | null
    _min: ExerciseSolutionMinAggregateOutputType | null
    _max: ExerciseSolutionMaxAggregateOutputType | null
  }

  export type ExerciseSolutionAvgAggregateOutputType = {
    exercise_solution_id: number | null
  }

  export type ExerciseSolutionSumAggregateOutputType = {
    exercise_solution_id: number | null
  }

  export type ExerciseSolutionMinAggregateOutputType = {
    exercise_solution_id: number | null
    solution: string | null
    is_public: boolean | null
    is_pinned: boolean | null
  }

  export type ExerciseSolutionMaxAggregateOutputType = {
    exercise_solution_id: number | null
    solution: string | null
    is_public: boolean | null
    is_pinned: boolean | null
  }

  export type ExerciseSolutionCountAggregateOutputType = {
    exercise_solution_id: number
    solution: number
    is_public: number
    is_pinned: number
    _all: number
  }


  export type ExerciseSolutionAvgAggregateInputType = {
    exercise_solution_id?: true
  }

  export type ExerciseSolutionSumAggregateInputType = {
    exercise_solution_id?: true
  }

  export type ExerciseSolutionMinAggregateInputType = {
    exercise_solution_id?: true
    solution?: true
    is_public?: true
    is_pinned?: true
  }

  export type ExerciseSolutionMaxAggregateInputType = {
    exercise_solution_id?: true
    solution?: true
    is_public?: true
    is_pinned?: true
  }

  export type ExerciseSolutionCountAggregateInputType = {
    exercise_solution_id?: true
    solution?: true
    is_public?: true
    is_pinned?: true
    _all?: true
  }

  export type ExerciseSolutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseSolution to aggregate.
     */
    where?: ExerciseSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseSolutions to fetch.
     */
    orderBy?: ExerciseSolutionOrderByWithRelationInput | ExerciseSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExerciseSolutions
    **/
    _count?: true | ExerciseSolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseSolutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSolutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseSolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseSolutionMaxAggregateInputType
  }

  export type GetExerciseSolutionAggregateType<T extends ExerciseSolutionAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseSolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseSolution[P]>
      : GetScalarType<T[P], AggregateExerciseSolution[P]>
  }




  export type ExerciseSolutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseSolutionWhereInput
    orderBy?: ExerciseSolutionOrderByWithAggregationInput | ExerciseSolutionOrderByWithAggregationInput[]
    by: ExerciseSolutionScalarFieldEnum[] | ExerciseSolutionScalarFieldEnum
    having?: ExerciseSolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseSolutionCountAggregateInputType | true
    _avg?: ExerciseSolutionAvgAggregateInputType
    _sum?: ExerciseSolutionSumAggregateInputType
    _min?: ExerciseSolutionMinAggregateInputType
    _max?: ExerciseSolutionMaxAggregateInputType
  }

  export type ExerciseSolutionGroupByOutputType = {
    exercise_solution_id: number
    solution: string
    is_public: boolean
    is_pinned: boolean
    _count: ExerciseSolutionCountAggregateOutputType | null
    _avg: ExerciseSolutionAvgAggregateOutputType | null
    _sum: ExerciseSolutionSumAggregateOutputType | null
    _min: ExerciseSolutionMinAggregateOutputType | null
    _max: ExerciseSolutionMaxAggregateOutputType | null
  }

  type GetExerciseSolutionGroupByPayload<T extends ExerciseSolutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseSolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseSolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseSolutionGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseSolutionGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSolutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    exercise_solution_id?: boolean
    solution?: boolean
    is_public?: boolean
    is_pinned?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseSolution"]>

  export type ExerciseSolutionSelectScalar = {
    exercise_solution_id?: boolean
    solution?: boolean
    is_public?: boolean
    is_pinned?: boolean
  }

  export type ExerciseSolutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ExerciseSolutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExerciseSolution"
    objects: {
      exercise: Prisma.$ExercisePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      exercise_solution_id: number
      solution: string
      is_public: boolean
      is_pinned: boolean
    }, ExtArgs["result"]["exerciseSolution"]>
    composites: {}
  }


  type ExerciseSolutionGetPayload<S extends boolean | null | undefined | ExerciseSolutionDefaultArgs> = $Result.GetResult<Prisma.$ExerciseSolutionPayload, S>

  type ExerciseSolutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExerciseSolutionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ExerciseSolutionCountAggregateInputType | true
    }

  export interface ExerciseSolutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExerciseSolution'], meta: { name: 'ExerciseSolution' } }
    /**
     * Find zero or one ExerciseSolution that matches the filter.
     * @param {ExerciseSolutionFindUniqueArgs} args - Arguments to find a ExerciseSolution
     * @example
     * // Get one ExerciseSolution
     * const exerciseSolution = await prisma.exerciseSolution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseSolutionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseSolutionFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExerciseSolution that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseSolutionFindUniqueOrThrowArgs} args - Arguments to find a ExerciseSolution
     * @example
     * // Get one ExerciseSolution
     * const exerciseSolution = await prisma.exerciseSolution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseSolutionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseSolutionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExerciseSolution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseSolutionFindFirstArgs} args - Arguments to find a ExerciseSolution
     * @example
     * // Get one ExerciseSolution
     * const exerciseSolution = await prisma.exerciseSolution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseSolutionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseSolutionFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExerciseSolution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseSolutionFindFirstOrThrowArgs} args - Arguments to find a ExerciseSolution
     * @example
     * // Get one ExerciseSolution
     * const exerciseSolution = await prisma.exerciseSolution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseSolutionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseSolutionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExerciseSolutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseSolutionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExerciseSolutions
     * const exerciseSolutions = await prisma.exerciseSolution.findMany()
     * 
     * // Get first 10 ExerciseSolutions
     * const exerciseSolutions = await prisma.exerciseSolution.findMany({ take: 10 })
     * 
     * // Only select the `exercise_solution_id`
     * const exerciseSolutionWithExercise_solution_idOnly = await prisma.exerciseSolution.findMany({ select: { exercise_solution_id: true } })
     * 
    **/
    findMany<T extends ExerciseSolutionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseSolutionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExerciseSolution.
     * @param {ExerciseSolutionCreateArgs} args - Arguments to create a ExerciseSolution.
     * @example
     * // Create one ExerciseSolution
     * const ExerciseSolution = await prisma.exerciseSolution.create({
     *   data: {
     *     // ... data to create a ExerciseSolution
     *   }
     * })
     * 
    **/
    create<T extends ExerciseSolutionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseSolutionCreateArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExerciseSolutions.
     *     @param {ExerciseSolutionCreateManyArgs} args - Arguments to create many ExerciseSolutions.
     *     @example
     *     // Create many ExerciseSolutions
     *     const exerciseSolution = await prisma.exerciseSolution.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExerciseSolutionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseSolutionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExerciseSolution.
     * @param {ExerciseSolutionDeleteArgs} args - Arguments to delete one ExerciseSolution.
     * @example
     * // Delete one ExerciseSolution
     * const ExerciseSolution = await prisma.exerciseSolution.delete({
     *   where: {
     *     // ... filter to delete one ExerciseSolution
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseSolutionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseSolutionDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExerciseSolution.
     * @param {ExerciseSolutionUpdateArgs} args - Arguments to update one ExerciseSolution.
     * @example
     * // Update one ExerciseSolution
     * const exerciseSolution = await prisma.exerciseSolution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseSolutionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseSolutionUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExerciseSolutions.
     * @param {ExerciseSolutionDeleteManyArgs} args - Arguments to filter ExerciseSolutions to delete.
     * @example
     * // Delete a few ExerciseSolutions
     * const { count } = await prisma.exerciseSolution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseSolutionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseSolutionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseSolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseSolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExerciseSolutions
     * const exerciseSolution = await prisma.exerciseSolution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseSolutionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseSolutionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExerciseSolution.
     * @param {ExerciseSolutionUpsertArgs} args - Arguments to update or create a ExerciseSolution.
     * @example
     * // Update or create a ExerciseSolution
     * const exerciseSolution = await prisma.exerciseSolution.upsert({
     *   create: {
     *     // ... data to create a ExerciseSolution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExerciseSolution we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseSolutionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseSolutionUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseSolutionClient<$Result.GetResult<Prisma.$ExerciseSolutionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExerciseSolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseSolutionCountArgs} args - Arguments to filter ExerciseSolutions to count.
     * @example
     * // Count the number of ExerciseSolutions
     * const count = await prisma.exerciseSolution.count({
     *   where: {
     *     // ... the filter for the ExerciseSolutions we want to count
     *   }
     * })
    **/
    count<T extends ExerciseSolutionCountArgs>(
      args?: Subset<T, ExerciseSolutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseSolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExerciseSolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseSolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseSolutionAggregateArgs>(args: Subset<T, ExerciseSolutionAggregateArgs>): Prisma.PrismaPromise<GetExerciseSolutionAggregateType<T>>

    /**
     * Group by ExerciseSolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseSolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseSolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseSolutionGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseSolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseSolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseSolutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExerciseSolution model
   */
  readonly fields: ExerciseSolutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExerciseSolution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseSolutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExerciseSolution model
   */ 
  interface ExerciseSolutionFieldRefs {
    readonly exercise_solution_id: FieldRef<"ExerciseSolution", 'Int'>
    readonly solution: FieldRef<"ExerciseSolution", 'String'>
    readonly is_public: FieldRef<"ExerciseSolution", 'Boolean'>
    readonly is_pinned: FieldRef<"ExerciseSolution", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ExerciseSolution findUnique
   */
  export type ExerciseSolutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseSolution to fetch.
     */
    where: ExerciseSolutionWhereUniqueInput
  }


  /**
   * ExerciseSolution findUniqueOrThrow
   */
  export type ExerciseSolutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseSolution to fetch.
     */
    where: ExerciseSolutionWhereUniqueInput
  }


  /**
   * ExerciseSolution findFirst
   */
  export type ExerciseSolutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseSolution to fetch.
     */
    where?: ExerciseSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseSolutions to fetch.
     */
    orderBy?: ExerciseSolutionOrderByWithRelationInput | ExerciseSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseSolutions.
     */
    cursor?: ExerciseSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseSolutions.
     */
    distinct?: ExerciseSolutionScalarFieldEnum | ExerciseSolutionScalarFieldEnum[]
  }


  /**
   * ExerciseSolution findFirstOrThrow
   */
  export type ExerciseSolutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseSolution to fetch.
     */
    where?: ExerciseSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseSolutions to fetch.
     */
    orderBy?: ExerciseSolutionOrderByWithRelationInput | ExerciseSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseSolutions.
     */
    cursor?: ExerciseSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseSolutions.
     */
    distinct?: ExerciseSolutionScalarFieldEnum | ExerciseSolutionScalarFieldEnum[]
  }


  /**
   * ExerciseSolution findMany
   */
  export type ExerciseSolutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseSolutions to fetch.
     */
    where?: ExerciseSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseSolutions to fetch.
     */
    orderBy?: ExerciseSolutionOrderByWithRelationInput | ExerciseSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExerciseSolutions.
     */
    cursor?: ExerciseSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseSolutions.
     */
    skip?: number
    distinct?: ExerciseSolutionScalarFieldEnum | ExerciseSolutionScalarFieldEnum[]
  }


  /**
   * ExerciseSolution create
   */
  export type ExerciseSolutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * The data needed to create a ExerciseSolution.
     */
    data: XOR<ExerciseSolutionCreateInput, ExerciseSolutionUncheckedCreateInput>
  }


  /**
   * ExerciseSolution createMany
   */
  export type ExerciseSolutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExerciseSolutions.
     */
    data: ExerciseSolutionCreateManyInput | ExerciseSolutionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ExerciseSolution update
   */
  export type ExerciseSolutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * The data needed to update a ExerciseSolution.
     */
    data: XOR<ExerciseSolutionUpdateInput, ExerciseSolutionUncheckedUpdateInput>
    /**
     * Choose, which ExerciseSolution to update.
     */
    where: ExerciseSolutionWhereUniqueInput
  }


  /**
   * ExerciseSolution updateMany
   */
  export type ExerciseSolutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExerciseSolutions.
     */
    data: XOR<ExerciseSolutionUpdateManyMutationInput, ExerciseSolutionUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseSolutions to update
     */
    where?: ExerciseSolutionWhereInput
  }


  /**
   * ExerciseSolution upsert
   */
  export type ExerciseSolutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * The filter to search for the ExerciseSolution to update in case it exists.
     */
    where: ExerciseSolutionWhereUniqueInput
    /**
     * In case the ExerciseSolution found by the `where` argument doesn't exist, create a new ExerciseSolution with this data.
     */
    create: XOR<ExerciseSolutionCreateInput, ExerciseSolutionUncheckedCreateInput>
    /**
     * In case the ExerciseSolution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseSolutionUpdateInput, ExerciseSolutionUncheckedUpdateInput>
  }


  /**
   * ExerciseSolution delete
   */
  export type ExerciseSolutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
    /**
     * Filter which ExerciseSolution to delete.
     */
    where: ExerciseSolutionWhereUniqueInput
  }


  /**
   * ExerciseSolution deleteMany
   */
  export type ExerciseSolutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseSolutions to delete
     */
    where?: ExerciseSolutionWhereInput
  }


  /**
   * ExerciseSolution without action
   */
  export type ExerciseSolutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseSolution
     */
    select?: ExerciseSolutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseSolutionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EnrollmentsScalarFieldEnum: {
    enrollment_id: 'enrollment_id',
    role: 'role',
    total_points: 'total_points'
  };

  export type EnrollmentsScalarFieldEnum = (typeof EnrollmentsScalarFieldEnum)[keyof typeof EnrollmentsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    course_id: 'course_id',
    name: 'name'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    assignment_id: 'assignment_id',
    name: 'name',
    description: 'description',
    due_date: 'due_date',
    language: 'language'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const AssignmentSolutionScalarFieldEnum: {
    assignment_solution_id: 'assignment_solution_id',
    solution: 'solution',
    feedback: 'feedback'
  };

  export type AssignmentSolutionScalarFieldEnum = (typeof AssignmentSolutionScalarFieldEnum)[keyof typeof AssignmentSolutionScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    session_id: 'session_id',
    name: 'name'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    exercise_id: 'exercise_id',
    name: 'name',
    description: 'description',
    points: 'points',
    language: 'language',
    code_template: 'code_template'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const TestCaseScalarFieldEnum: {
    test_case_id: 'test_case_id',
    code: 'code',
    is_visible: 'is_visible'
  };

  export type TestCaseScalarFieldEnum = (typeof TestCaseScalarFieldEnum)[keyof typeof TestCaseScalarFieldEnum]


  export const HintScalarFieldEnum: {
    hint_id: 'hint_id',
    description: 'description',
    order: 'order'
  };

  export type HintScalarFieldEnum = (typeof HintScalarFieldEnum)[keyof typeof HintScalarFieldEnum]


  export const ExerciseSolutionScalarFieldEnum: {
    exercise_solution_id: 'exercise_solution_id',
    solution: 'solution',
    is_public: 'is_public',
    is_pinned: 'is_pinned'
  };

  export type ExerciseSolutionScalarFieldEnum = (typeof ExerciseSolutionScalarFieldEnum)[keyof typeof ExerciseSolutionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EnrollmentsWhereInput = {
    AND?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    OR?: EnrollmentsWhereInput[]
    NOT?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    enrollment_id?: IntFilter<"Enrollments"> | number
    role?: EnumRoleFilter<"Enrollments"> | $Enums.Role
    total_points?: IntNullableFilter<"Enrollments"> | number | null
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EnrollmentsOrderByWithRelationInput = {
    enrollment_id?: SortOrder
    role?: SortOrder
    total_points?: SortOrderInput | SortOrder
    course?: CourseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EnrollmentsWhereUniqueInput = Prisma.AtLeast<{
    enrollment_id?: number
    AND?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    OR?: EnrollmentsWhereInput[]
    NOT?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    role?: EnumRoleFilter<"Enrollments"> | $Enums.Role
    total_points?: IntNullableFilter<"Enrollments"> | number | null
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "enrollment_id">

  export type EnrollmentsOrderByWithAggregationInput = {
    enrollment_id?: SortOrder
    role?: SortOrder
    total_points?: SortOrderInput | SortOrder
    _count?: EnrollmentsCountOrderByAggregateInput
    _avg?: EnrollmentsAvgOrderByAggregateInput
    _max?: EnrollmentsMaxOrderByAggregateInput
    _min?: EnrollmentsMinOrderByAggregateInput
    _sum?: EnrollmentsSumOrderByAggregateInput
  }

  export type EnrollmentsScalarWhereWithAggregatesInput = {
    AND?: EnrollmentsScalarWhereWithAggregatesInput | EnrollmentsScalarWhereWithAggregatesInput[]
    OR?: EnrollmentsScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentsScalarWhereWithAggregatesInput | EnrollmentsScalarWhereWithAggregatesInput[]
    enrollment_id?: IntWithAggregatesFilter<"Enrollments"> | number
    role?: EnumRoleWithAggregatesFilter<"Enrollments"> | $Enums.Role
    total_points?: IntNullableWithAggregatesFilter<"Enrollments"> | number | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    enrollments?: EnrollmentsListRelationFilter
    submitted_assignments?: AssignmentSolutionListRelationFilter
    submitted_exercises?: ExerciseSolutionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    enrollments?: EnrollmentsOrderByRelationAggregateInput
    submitted_assignments?: AssignmentSolutionOrderByRelationAggregateInput
    submitted_exercises?: ExerciseSolutionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    enrollments?: EnrollmentsListRelationFilter
    submitted_assignments?: AssignmentSolutionListRelationFilter
    submitted_exercises?: ExerciseSolutionListRelationFilter
  }, "user_id" | "username">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    course_id?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    enrollments?: EnrollmentsListRelationFilter
    sessions?: SessionListRelationFilter
    assignments?: AssignmentListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    course_id?: SortOrder
    name?: SortOrder
    enrollments?: EnrollmentsOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    course_id?: number
    name?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    enrollments?: EnrollmentsListRelationFilter
    sessions?: SessionListRelationFilter
    assignments?: AssignmentListRelationFilter
  }, "course_id" | "name">

  export type CourseOrderByWithAggregationInput = {
    course_id?: SortOrder
    name?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    course_id?: IntWithAggregatesFilter<"Course"> | number
    name?: StringWithAggregatesFilter<"Course"> | string
  }

  export type AssignmentWhereInput = {
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    assignment_id?: IntFilter<"Assignment"> | number
    name?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    due_date?: DateTimeFilter<"Assignment"> | Date | string
    language?: StringFilter<"Assignment"> | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    solutions?: AssignmentSolutionListRelationFilter
  }

  export type AssignmentOrderByWithRelationInput = {
    assignment_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    due_date?: SortOrder
    language?: SortOrder
    course?: CourseOrderByWithRelationInput
    solutions?: AssignmentSolutionOrderByRelationAggregateInput
  }

  export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
    assignment_id?: number
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    name?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    due_date?: DateTimeFilter<"Assignment"> | Date | string
    language?: StringFilter<"Assignment"> | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    solutions?: AssignmentSolutionListRelationFilter
  }, "assignment_id">

  export type AssignmentOrderByWithAggregationInput = {
    assignment_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    due_date?: SortOrder
    language?: SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _avg?: AssignmentAvgOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
    _sum?: AssignmentSumOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    OR?: AssignmentScalarWhereWithAggregatesInput[]
    NOT?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    assignment_id?: IntWithAggregatesFilter<"Assignment"> | number
    name?: StringWithAggregatesFilter<"Assignment"> | string
    description?: StringWithAggregatesFilter<"Assignment"> | string
    due_date?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    language?: StringWithAggregatesFilter<"Assignment"> | string
  }

  export type AssignmentSolutionWhereInput = {
    AND?: AssignmentSolutionWhereInput | AssignmentSolutionWhereInput[]
    OR?: AssignmentSolutionWhereInput[]
    NOT?: AssignmentSolutionWhereInput | AssignmentSolutionWhereInput[]
    assignment_solution_id?: IntFilter<"AssignmentSolution"> | number
    solution?: StringFilter<"AssignmentSolution"> | string
    feedback?: StringFilter<"AssignmentSolution"> | string
    assignment?: XOR<AssignmentRelationFilter, AssignmentWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AssignmentSolutionOrderByWithRelationInput = {
    assignment_solution_id?: SortOrder
    solution?: SortOrder
    feedback?: SortOrder
    assignment?: AssignmentOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type AssignmentSolutionWhereUniqueInput = Prisma.AtLeast<{
    assignment_solution_id?: number
    AND?: AssignmentSolutionWhereInput | AssignmentSolutionWhereInput[]
    OR?: AssignmentSolutionWhereInput[]
    NOT?: AssignmentSolutionWhereInput | AssignmentSolutionWhereInput[]
    solution?: StringFilter<"AssignmentSolution"> | string
    feedback?: StringFilter<"AssignmentSolution"> | string
    assignment?: XOR<AssignmentRelationFilter, AssignmentWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }, "assignment_solution_id">

  export type AssignmentSolutionOrderByWithAggregationInput = {
    assignment_solution_id?: SortOrder
    solution?: SortOrder
    feedback?: SortOrder
    _count?: AssignmentSolutionCountOrderByAggregateInput
    _avg?: AssignmentSolutionAvgOrderByAggregateInput
    _max?: AssignmentSolutionMaxOrderByAggregateInput
    _min?: AssignmentSolutionMinOrderByAggregateInput
    _sum?: AssignmentSolutionSumOrderByAggregateInput
  }

  export type AssignmentSolutionScalarWhereWithAggregatesInput = {
    AND?: AssignmentSolutionScalarWhereWithAggregatesInput | AssignmentSolutionScalarWhereWithAggregatesInput[]
    OR?: AssignmentSolutionScalarWhereWithAggregatesInput[]
    NOT?: AssignmentSolutionScalarWhereWithAggregatesInput | AssignmentSolutionScalarWhereWithAggregatesInput[]
    assignment_solution_id?: IntWithAggregatesFilter<"AssignmentSolution"> | number
    solution?: StringWithAggregatesFilter<"AssignmentSolution"> | string
    feedback?: StringWithAggregatesFilter<"AssignmentSolution"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    session_id?: IntFilter<"Session"> | number
    name?: StringFilter<"Session"> | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    exercises?: ExerciseListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    session_id?: SortOrder
    name?: SortOrder
    course?: CourseOrderByWithRelationInput
    exercises?: ExerciseOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    session_id?: number
    name?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    exercises?: ExerciseListRelationFilter
  }, "session_id" | "name">

  export type SessionOrderByWithAggregationInput = {
    session_id?: SortOrder
    name?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    session_id?: IntWithAggregatesFilter<"Session"> | number
    name?: StringWithAggregatesFilter<"Session"> | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    exercise_id?: IntFilter<"Exercise"> | number
    name?: StringFilter<"Exercise"> | string
    description?: StringFilter<"Exercise"> | string
    points?: IntFilter<"Exercise"> | number
    language?: StringFilter<"Exercise"> | string
    code_template?: StringFilter<"Exercise"> | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    test_case?: TestCaseListRelationFilter
    hints?: HintListRelationFilter
    solutions?: ExerciseSolutionListRelationFilter
  }

  export type ExerciseOrderByWithRelationInput = {
    exercise_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    points?: SortOrder
    language?: SortOrder
    code_template?: SortOrder
    session?: SessionOrderByWithRelationInput
    test_case?: TestCaseOrderByRelationAggregateInput
    hints?: HintOrderByRelationAggregateInput
    solutions?: ExerciseSolutionOrderByRelationAggregateInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    exercise_id?: number
    name?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    description?: StringFilter<"Exercise"> | string
    points?: IntFilter<"Exercise"> | number
    language?: StringFilter<"Exercise"> | string
    code_template?: StringFilter<"Exercise"> | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    test_case?: TestCaseListRelationFilter
    hints?: HintListRelationFilter
    solutions?: ExerciseSolutionListRelationFilter
  }, "exercise_id" | "name">

  export type ExerciseOrderByWithAggregationInput = {
    exercise_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    points?: SortOrder
    language?: SortOrder
    code_template?: SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _avg?: ExerciseAvgOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
    _sum?: ExerciseSumOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    exercise_id?: IntWithAggregatesFilter<"Exercise"> | number
    name?: StringWithAggregatesFilter<"Exercise"> | string
    description?: StringWithAggregatesFilter<"Exercise"> | string
    points?: IntWithAggregatesFilter<"Exercise"> | number
    language?: StringWithAggregatesFilter<"Exercise"> | string
    code_template?: StringWithAggregatesFilter<"Exercise"> | string
  }

  export type TestCaseWhereInput = {
    AND?: TestCaseWhereInput | TestCaseWhereInput[]
    OR?: TestCaseWhereInput[]
    NOT?: TestCaseWhereInput | TestCaseWhereInput[]
    test_case_id?: IntFilter<"TestCase"> | number
    code?: StringFilter<"TestCase"> | string
    is_visible?: BoolFilter<"TestCase"> | boolean
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
  }

  export type TestCaseOrderByWithRelationInput = {
    test_case_id?: SortOrder
    code?: SortOrder
    is_visible?: SortOrder
    exercise?: ExerciseOrderByWithRelationInput
  }

  export type TestCaseWhereUniqueInput = Prisma.AtLeast<{
    test_case_id?: number
    AND?: TestCaseWhereInput | TestCaseWhereInput[]
    OR?: TestCaseWhereInput[]
    NOT?: TestCaseWhereInput | TestCaseWhereInput[]
    code?: StringFilter<"TestCase"> | string
    is_visible?: BoolFilter<"TestCase"> | boolean
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
  }, "test_case_id">

  export type TestCaseOrderByWithAggregationInput = {
    test_case_id?: SortOrder
    code?: SortOrder
    is_visible?: SortOrder
    _count?: TestCaseCountOrderByAggregateInput
    _avg?: TestCaseAvgOrderByAggregateInput
    _max?: TestCaseMaxOrderByAggregateInput
    _min?: TestCaseMinOrderByAggregateInput
    _sum?: TestCaseSumOrderByAggregateInput
  }

  export type TestCaseScalarWhereWithAggregatesInput = {
    AND?: TestCaseScalarWhereWithAggregatesInput | TestCaseScalarWhereWithAggregatesInput[]
    OR?: TestCaseScalarWhereWithAggregatesInput[]
    NOT?: TestCaseScalarWhereWithAggregatesInput | TestCaseScalarWhereWithAggregatesInput[]
    test_case_id?: IntWithAggregatesFilter<"TestCase"> | number
    code?: StringWithAggregatesFilter<"TestCase"> | string
    is_visible?: BoolWithAggregatesFilter<"TestCase"> | boolean
  }

  export type HintWhereInput = {
    AND?: HintWhereInput | HintWhereInput[]
    OR?: HintWhereInput[]
    NOT?: HintWhereInput | HintWhereInput[]
    hint_id?: IntFilter<"Hint"> | number
    description?: StringFilter<"Hint"> | string
    order?: IntFilter<"Hint"> | number
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
  }

  export type HintOrderByWithRelationInput = {
    hint_id?: SortOrder
    description?: SortOrder
    order?: SortOrder
    exercise?: ExerciseOrderByWithRelationInput
  }

  export type HintWhereUniqueInput = Prisma.AtLeast<{
    hint_id?: number
    hint_id_order?: HintHint_idOrderCompoundUniqueInput
    AND?: HintWhereInput | HintWhereInput[]
    OR?: HintWhereInput[]
    NOT?: HintWhereInput | HintWhereInput[]
    description?: StringFilter<"Hint"> | string
    order?: IntFilter<"Hint"> | number
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
  }, "hint_id" | "hint_id_order">

  export type HintOrderByWithAggregationInput = {
    hint_id?: SortOrder
    description?: SortOrder
    order?: SortOrder
    _count?: HintCountOrderByAggregateInput
    _avg?: HintAvgOrderByAggregateInput
    _max?: HintMaxOrderByAggregateInput
    _min?: HintMinOrderByAggregateInput
    _sum?: HintSumOrderByAggregateInput
  }

  export type HintScalarWhereWithAggregatesInput = {
    AND?: HintScalarWhereWithAggregatesInput | HintScalarWhereWithAggregatesInput[]
    OR?: HintScalarWhereWithAggregatesInput[]
    NOT?: HintScalarWhereWithAggregatesInput | HintScalarWhereWithAggregatesInput[]
    hint_id?: IntWithAggregatesFilter<"Hint"> | number
    description?: StringWithAggregatesFilter<"Hint"> | string
    order?: IntWithAggregatesFilter<"Hint"> | number
  }

  export type ExerciseSolutionWhereInput = {
    AND?: ExerciseSolutionWhereInput | ExerciseSolutionWhereInput[]
    OR?: ExerciseSolutionWhereInput[]
    NOT?: ExerciseSolutionWhereInput | ExerciseSolutionWhereInput[]
    exercise_solution_id?: IntFilter<"ExerciseSolution"> | number
    solution?: StringFilter<"ExerciseSolution"> | string
    is_public?: BoolFilter<"ExerciseSolution"> | boolean
    is_pinned?: BoolFilter<"ExerciseSolution"> | boolean
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ExerciseSolutionOrderByWithRelationInput = {
    exercise_solution_id?: SortOrder
    solution?: SortOrder
    is_public?: SortOrder
    is_pinned?: SortOrder
    exercise?: ExerciseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ExerciseSolutionWhereUniqueInput = Prisma.AtLeast<{
    exercise_solution_id?: number
    AND?: ExerciseSolutionWhereInput | ExerciseSolutionWhereInput[]
    OR?: ExerciseSolutionWhereInput[]
    NOT?: ExerciseSolutionWhereInput | ExerciseSolutionWhereInput[]
    solution?: StringFilter<"ExerciseSolution"> | string
    is_public?: BoolFilter<"ExerciseSolution"> | boolean
    is_pinned?: BoolFilter<"ExerciseSolution"> | boolean
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "exercise_solution_id">

  export type ExerciseSolutionOrderByWithAggregationInput = {
    exercise_solution_id?: SortOrder
    solution?: SortOrder
    is_public?: SortOrder
    is_pinned?: SortOrder
    _count?: ExerciseSolutionCountOrderByAggregateInput
    _avg?: ExerciseSolutionAvgOrderByAggregateInput
    _max?: ExerciseSolutionMaxOrderByAggregateInput
    _min?: ExerciseSolutionMinOrderByAggregateInput
    _sum?: ExerciseSolutionSumOrderByAggregateInput
  }

  export type ExerciseSolutionScalarWhereWithAggregatesInput = {
    AND?: ExerciseSolutionScalarWhereWithAggregatesInput | ExerciseSolutionScalarWhereWithAggregatesInput[]
    OR?: ExerciseSolutionScalarWhereWithAggregatesInput[]
    NOT?: ExerciseSolutionScalarWhereWithAggregatesInput | ExerciseSolutionScalarWhereWithAggregatesInput[]
    exercise_solution_id?: IntWithAggregatesFilter<"ExerciseSolution"> | number
    solution?: StringWithAggregatesFilter<"ExerciseSolution"> | string
    is_public?: BoolWithAggregatesFilter<"ExerciseSolution"> | boolean
    is_pinned?: BoolWithAggregatesFilter<"ExerciseSolution"> | boolean
  }

  export type EnrollmentsCreateInput = {
    role?: $Enums.Role
    total_points?: number | null
    course?: CourseCreateNestedOneWithoutEnrollmentsInput
    user?: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateInput = {
    enrollment_id?: number
    role?: $Enums.Role
    total_points?: number | null
  }

  export type EnrollmentsUpdateInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
    user?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateInput = {
    enrollment_id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnrollmentsCreateManyInput = {
    enrollment_id?: number
    role?: $Enums.Role
    total_points?: number | null
  }

  export type EnrollmentsUpdateManyMutationInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnrollmentsUncheckedUpdateManyInput = {
    enrollment_id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    username: string
    password: string
    enrollments?: EnrollmentsCreateNestedManyWithoutUserInput
    submitted_assignments?: AssignmentSolutionCreateNestedManyWithoutStudentInput
    submitted_exercises?: ExerciseSolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    username: string
    password: string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutUserInput
    submitted_assignments?: AssignmentSolutionUncheckedCreateNestedManyWithoutStudentInput
    submitted_exercises?: ExerciseSolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUpdateManyWithoutUserNestedInput
    submitted_assignments?: AssignmentSolutionUpdateManyWithoutStudentNestedInput
    submitted_exercises?: ExerciseSolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutUserNestedInput
    submitted_assignments?: AssignmentSolutionUncheckedUpdateManyWithoutStudentNestedInput
    submitted_exercises?: ExerciseSolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: number
    username: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCreateInput = {
    name: string
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    sessions?: SessionCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    course_id?: number
    name: string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    sessions?: SessionUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    course_id?: number
    name: string
  }

  export type CourseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUncheckedUpdateManyInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentCreateInput = {
    name: string
    description: string
    due_date: Date | string
    language: string
    course?: CourseCreateNestedOneWithoutAssignmentsInput
    solutions?: AssignmentSolutionCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateInput = {
    assignment_id?: number
    name: string
    description: string
    due_date: Date | string
    language: string
    solutions?: AssignmentSolutionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    solutions?: AssignmentSolutionUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    solutions?: AssignmentSolutionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentCreateManyInput = {
    assignment_id?: number
    name: string
    description: string
    due_date: Date | string
    language: string
  }

  export type AssignmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentUncheckedUpdateManyInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentSolutionCreateInput = {
    solution: string
    feedback: string
    assignment?: AssignmentCreateNestedOneWithoutSolutionsInput
    student?: UserCreateNestedOneWithoutSubmitted_assignmentsInput
  }

  export type AssignmentSolutionUncheckedCreateInput = {
    assignment_solution_id?: number
    solution: string
    feedback: string
  }

  export type AssignmentSolutionUpdateInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    assignment?: AssignmentUpdateOneRequiredWithoutSolutionsNestedInput
    student?: UserUpdateOneRequiredWithoutSubmitted_assignmentsNestedInput
  }

  export type AssignmentSolutionUncheckedUpdateInput = {
    assignment_solution_id?: IntFieldUpdateOperationsInput | number
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentSolutionCreateManyInput = {
    assignment_solution_id?: number
    solution: string
    feedback: string
  }

  export type AssignmentSolutionUpdateManyMutationInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentSolutionUncheckedUpdateManyInput = {
    assignment_solution_id?: IntFieldUpdateOperationsInput | number
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    name: string
    course?: CourseCreateNestedOneWithoutSessionsInput
    exercises?: ExerciseCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    session_id?: number
    name: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
    exercises?: ExerciseUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    session_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionCreateManyInput = {
    session_id?: number
    name: string
  }

  export type SessionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    session_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateInput = {
    name: string
    description: string
    points: number
    language: string
    code_template: string
    session?: SessionCreateNestedOneWithoutExercisesInput
    test_case?: TestCaseCreateNestedManyWithoutExerciseInput
    hints?: HintCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateInput = {
    exercise_id?: number
    name: string
    description: string
    points: number
    language: string
    code_template: string
    test_case?: TestCaseUncheckedCreateNestedManyWithoutExerciseInput
    hints?: HintUncheckedCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    session?: SessionUpdateOneRequiredWithoutExercisesNestedInput
    test_case?: TestCaseUpdateManyWithoutExerciseNestedInput
    hints?: HintUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    exercise_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    test_case?: TestCaseUncheckedUpdateManyWithoutExerciseNestedInput
    hints?: HintUncheckedUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateManyInput = {
    exercise_id?: number
    name: string
    description: string
    points: number
    language: string
    code_template: string
  }

  export type ExerciseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseUncheckedUpdateManyInput = {
    exercise_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
  }

  export type TestCaseCreateInput = {
    code: string
    is_visible: boolean
    exercise?: ExerciseCreateNestedOneWithoutTest_caseInput
  }

  export type TestCaseUncheckedCreateInput = {
    test_case_id?: number
    code: string
    is_visible: boolean
  }

  export type TestCaseUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    is_visible?: BoolFieldUpdateOperationsInput | boolean
    exercise?: ExerciseUpdateOneRequiredWithoutTest_caseNestedInput
  }

  export type TestCaseUncheckedUpdateInput = {
    test_case_id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    is_visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestCaseCreateManyInput = {
    test_case_id?: number
    code: string
    is_visible: boolean
  }

  export type TestCaseUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    is_visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestCaseUncheckedUpdateManyInput = {
    test_case_id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    is_visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HintCreateInput = {
    description: string
    order?: number
    exercise?: ExerciseCreateNestedOneWithoutHintsInput
  }

  export type HintUncheckedCreateInput = {
    hint_id?: number
    description: string
    order?: number
  }

  export type HintUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    exercise?: ExerciseUpdateOneRequiredWithoutHintsNestedInput
  }

  export type HintUncheckedUpdateInput = {
    hint_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type HintCreateManyInput = {
    hint_id?: number
    description: string
    order?: number
  }

  export type HintUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type HintUncheckedUpdateManyInput = {
    hint_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseSolutionCreateInput = {
    solution: string
    is_public: boolean
    is_pinned: boolean
    exercise?: ExerciseCreateNestedOneWithoutSolutionsInput
    user?: UserCreateNestedOneWithoutSubmitted_exercisesInput
  }

  export type ExerciseSolutionUncheckedCreateInput = {
    exercise_solution_id?: number
    solution: string
    is_public: boolean
    is_pinned: boolean
  }

  export type ExerciseSolutionUpdateInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    exercise?: ExerciseUpdateOneRequiredWithoutSolutionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmitted_exercisesNestedInput
  }

  export type ExerciseSolutionUncheckedUpdateInput = {
    exercise_solution_id?: IntFieldUpdateOperationsInput | number
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseSolutionCreateManyInput = {
    exercise_solution_id?: number
    solution: string
    is_public: boolean
    is_pinned: boolean
  }

  export type ExerciseSolutionUpdateManyMutationInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseSolutionUncheckedUpdateManyInput = {
    exercise_solution_id?: IntFieldUpdateOperationsInput | number
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EnrollmentsCountOrderByAggregateInput = {
    enrollment_id?: SortOrder
    role?: SortOrder
    total_points?: SortOrder
  }

  export type EnrollmentsAvgOrderByAggregateInput = {
    enrollment_id?: SortOrder
    total_points?: SortOrder
  }

  export type EnrollmentsMaxOrderByAggregateInput = {
    enrollment_id?: SortOrder
    role?: SortOrder
    total_points?: SortOrder
  }

  export type EnrollmentsMinOrderByAggregateInput = {
    enrollment_id?: SortOrder
    role?: SortOrder
    total_points?: SortOrder
  }

  export type EnrollmentsSumOrderByAggregateInput = {
    enrollment_id?: SortOrder
    total_points?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnrollmentsListRelationFilter = {
    every?: EnrollmentsWhereInput
    some?: EnrollmentsWhereInput
    none?: EnrollmentsWhereInput
  }

  export type AssignmentSolutionListRelationFilter = {
    every?: AssignmentSolutionWhereInput
    some?: AssignmentSolutionWhereInput
    none?: AssignmentSolutionWhereInput
  }

  export type ExerciseSolutionListRelationFilter = {
    every?: ExerciseSolutionWhereInput
    some?: ExerciseSolutionWhereInput
    none?: ExerciseSolutionWhereInput
  }

  export type EnrollmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentSolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseSolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    course_id?: SortOrder
    name?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    course_id?: SortOrder
    name?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    course_id?: SortOrder
    name?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AssignmentCountOrderByAggregateInput = {
    assignment_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    due_date?: SortOrder
    language?: SortOrder
  }

  export type AssignmentAvgOrderByAggregateInput = {
    assignment_id?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    assignment_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    due_date?: SortOrder
    language?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    assignment_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    due_date?: SortOrder
    language?: SortOrder
  }

  export type AssignmentSumOrderByAggregateInput = {
    assignment_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AssignmentRelationFilter = {
    is?: AssignmentWhereInput
    isNot?: AssignmentWhereInput
  }

  export type AssignmentSolutionCountOrderByAggregateInput = {
    assignment_solution_id?: SortOrder
    solution?: SortOrder
    feedback?: SortOrder
  }

  export type AssignmentSolutionAvgOrderByAggregateInput = {
    assignment_solution_id?: SortOrder
  }

  export type AssignmentSolutionMaxOrderByAggregateInput = {
    assignment_solution_id?: SortOrder
    solution?: SortOrder
    feedback?: SortOrder
  }

  export type AssignmentSolutionMinOrderByAggregateInput = {
    assignment_solution_id?: SortOrder
    solution?: SortOrder
    feedback?: SortOrder
  }

  export type AssignmentSolutionSumOrderByAggregateInput = {
    assignment_solution_id?: SortOrder
  }

  export type ExerciseListRelationFilter = {
    every?: ExerciseWhereInput
    some?: ExerciseWhereInput
    none?: ExerciseWhereInput
  }

  export type ExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    session_id?: SortOrder
    name?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    session_id?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    session_id?: SortOrder
    name?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    session_id?: SortOrder
    name?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    session_id?: SortOrder
  }

  export type SessionRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type TestCaseListRelationFilter = {
    every?: TestCaseWhereInput
    some?: TestCaseWhereInput
    none?: TestCaseWhereInput
  }

  export type HintListRelationFilter = {
    every?: HintWhereInput
    some?: HintWhereInput
    none?: HintWhereInput
  }

  export type TestCaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HintOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseCountOrderByAggregateInput = {
    exercise_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    points?: SortOrder
    language?: SortOrder
    code_template?: SortOrder
  }

  export type ExerciseAvgOrderByAggregateInput = {
    exercise_id?: SortOrder
    points?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    exercise_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    points?: SortOrder
    language?: SortOrder
    code_template?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    exercise_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    points?: SortOrder
    language?: SortOrder
    code_template?: SortOrder
  }

  export type ExerciseSumOrderByAggregateInput = {
    exercise_id?: SortOrder
    points?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ExerciseRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type TestCaseCountOrderByAggregateInput = {
    test_case_id?: SortOrder
    code?: SortOrder
    is_visible?: SortOrder
  }

  export type TestCaseAvgOrderByAggregateInput = {
    test_case_id?: SortOrder
  }

  export type TestCaseMaxOrderByAggregateInput = {
    test_case_id?: SortOrder
    code?: SortOrder
    is_visible?: SortOrder
  }

  export type TestCaseMinOrderByAggregateInput = {
    test_case_id?: SortOrder
    code?: SortOrder
    is_visible?: SortOrder
  }

  export type TestCaseSumOrderByAggregateInput = {
    test_case_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type HintHint_idOrderCompoundUniqueInput = {
    hint_id: number
    order: number
  }

  export type HintCountOrderByAggregateInput = {
    hint_id?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type HintAvgOrderByAggregateInput = {
    hint_id?: SortOrder
    order?: SortOrder
  }

  export type HintMaxOrderByAggregateInput = {
    hint_id?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type HintMinOrderByAggregateInput = {
    hint_id?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type HintSumOrderByAggregateInput = {
    hint_id?: SortOrder
    order?: SortOrder
  }

  export type ExerciseSolutionCountOrderByAggregateInput = {
    exercise_solution_id?: SortOrder
    solution?: SortOrder
    is_public?: SortOrder
    is_pinned?: SortOrder
  }

  export type ExerciseSolutionAvgOrderByAggregateInput = {
    exercise_solution_id?: SortOrder
  }

  export type ExerciseSolutionMaxOrderByAggregateInput = {
    exercise_solution_id?: SortOrder
    solution?: SortOrder
    is_public?: SortOrder
    is_pinned?: SortOrder
  }

  export type ExerciseSolutionMinOrderByAggregateInput = {
    exercise_solution_id?: SortOrder
    solution?: SortOrder
    is_public?: SortOrder
    is_pinned?: SortOrder
  }

  export type ExerciseSolutionSumOrderByAggregateInput = {
    exercise_solution_id?: SortOrder
  }

  export type CourseCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    upsert?: CourseUpsertWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutEnrollmentsInput, CourseUpdateWithoutEnrollmentsInput>, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    upsert?: UserUpsertWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnrollmentsInput, UserUpdateWithoutEnrollmentsInput>, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnrollmentsCreateNestedManyWithoutUserInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type AssignmentSolutionCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssignmentSolutionCreateWithoutStudentInput, AssignmentSolutionUncheckedCreateWithoutStudentInput> | AssignmentSolutionCreateWithoutStudentInput[] | AssignmentSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutStudentInput | AssignmentSolutionCreateOrConnectWithoutStudentInput[]
    createMany?: AssignmentSolutionCreateManyStudentInputEnvelope
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
  }

  export type ExerciseSolutionCreateNestedManyWithoutUserInput = {
    create?: XOR<ExerciseSolutionCreateWithoutUserInput, ExerciseSolutionUncheckedCreateWithoutUserInput> | ExerciseSolutionCreateWithoutUserInput[] | ExerciseSolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutUserInput | ExerciseSolutionCreateOrConnectWithoutUserInput[]
    createMany?: ExerciseSolutionCreateManyUserInputEnvelope
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
  }

  export type EnrollmentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type AssignmentSolutionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssignmentSolutionCreateWithoutStudentInput, AssignmentSolutionUncheckedCreateWithoutStudentInput> | AssignmentSolutionCreateWithoutStudentInput[] | AssignmentSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutStudentInput | AssignmentSolutionCreateOrConnectWithoutStudentInput[]
    createMany?: AssignmentSolutionCreateManyStudentInputEnvelope
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
  }

  export type ExerciseSolutionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ExerciseSolutionCreateWithoutUserInput, ExerciseSolutionUncheckedCreateWithoutUserInput> | ExerciseSolutionCreateWithoutUserInput[] | ExerciseSolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutUserInput | ExerciseSolutionCreateOrConnectWithoutUserInput[]
    createMany?: ExerciseSolutionCreateManyUserInputEnvelope
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnrollmentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutUserInput | EnrollmentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutUserInput | EnrollmentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutUserInput | EnrollmentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type AssignmentSolutionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssignmentSolutionCreateWithoutStudentInput, AssignmentSolutionUncheckedCreateWithoutStudentInput> | AssignmentSolutionCreateWithoutStudentInput[] | AssignmentSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutStudentInput | AssignmentSolutionCreateOrConnectWithoutStudentInput[]
    upsert?: AssignmentSolutionUpsertWithWhereUniqueWithoutStudentInput | AssignmentSolutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssignmentSolutionCreateManyStudentInputEnvelope
    set?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    disconnect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    delete?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    update?: AssignmentSolutionUpdateWithWhereUniqueWithoutStudentInput | AssignmentSolutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssignmentSolutionUpdateManyWithWhereWithoutStudentInput | AssignmentSolutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssignmentSolutionScalarWhereInput | AssignmentSolutionScalarWhereInput[]
  }

  export type ExerciseSolutionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExerciseSolutionCreateWithoutUserInput, ExerciseSolutionUncheckedCreateWithoutUserInput> | ExerciseSolutionCreateWithoutUserInput[] | ExerciseSolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutUserInput | ExerciseSolutionCreateOrConnectWithoutUserInput[]
    upsert?: ExerciseSolutionUpsertWithWhereUniqueWithoutUserInput | ExerciseSolutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExerciseSolutionCreateManyUserInputEnvelope
    set?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    disconnect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    delete?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    update?: ExerciseSolutionUpdateWithWhereUniqueWithoutUserInput | ExerciseSolutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExerciseSolutionUpdateManyWithWhereWithoutUserInput | ExerciseSolutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExerciseSolutionScalarWhereInput | ExerciseSolutionScalarWhereInput[]
  }

  export type EnrollmentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutUserInput | EnrollmentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutUserInput | EnrollmentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutUserInput | EnrollmentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type AssignmentSolutionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssignmentSolutionCreateWithoutStudentInput, AssignmentSolutionUncheckedCreateWithoutStudentInput> | AssignmentSolutionCreateWithoutStudentInput[] | AssignmentSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutStudentInput | AssignmentSolutionCreateOrConnectWithoutStudentInput[]
    upsert?: AssignmentSolutionUpsertWithWhereUniqueWithoutStudentInput | AssignmentSolutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssignmentSolutionCreateManyStudentInputEnvelope
    set?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    disconnect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    delete?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    update?: AssignmentSolutionUpdateWithWhereUniqueWithoutStudentInput | AssignmentSolutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssignmentSolutionUpdateManyWithWhereWithoutStudentInput | AssignmentSolutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssignmentSolutionScalarWhereInput | AssignmentSolutionScalarWhereInput[]
  }

  export type ExerciseSolutionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExerciseSolutionCreateWithoutUserInput, ExerciseSolutionUncheckedCreateWithoutUserInput> | ExerciseSolutionCreateWithoutUserInput[] | ExerciseSolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutUserInput | ExerciseSolutionCreateOrConnectWithoutUserInput[]
    upsert?: ExerciseSolutionUpsertWithWhereUniqueWithoutUserInput | ExerciseSolutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExerciseSolutionCreateManyUserInputEnvelope
    set?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    disconnect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    delete?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    update?: ExerciseSolutionUpdateWithWhereUniqueWithoutUserInput | ExerciseSolutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExerciseSolutionUpdateManyWithWhereWithoutUserInput | ExerciseSolutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExerciseSolutionScalarWhereInput | ExerciseSolutionScalarWhereInput[]
  }

  export type EnrollmentsCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutCourseInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type EnrollmentsUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type EnrollmentsUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutCourseInput | EnrollmentsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutCourseInput | EnrollmentsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutCourseInput | EnrollmentsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutCourseNestedInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutCourseInput | SessionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutCourseInput | SessionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutCourseInput | SessionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCourseInput | AssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCourseInput | AssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCourseInput | AssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutCourseInput | EnrollmentsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutCourseInput | EnrollmentsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutCourseInput | EnrollmentsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutCourseInput | SessionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutCourseInput | SessionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutCourseInput | SessionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCourseInput | AssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCourseInput | AssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCourseInput | AssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssignmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type AssignmentSolutionCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<AssignmentSolutionCreateWithoutAssignmentInput, AssignmentSolutionUncheckedCreateWithoutAssignmentInput> | AssignmentSolutionCreateWithoutAssignmentInput[] | AssignmentSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutAssignmentInput | AssignmentSolutionCreateOrConnectWithoutAssignmentInput[]
    createMany?: AssignmentSolutionCreateManyAssignmentInputEnvelope
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
  }

  export type AssignmentSolutionUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<AssignmentSolutionCreateWithoutAssignmentInput, AssignmentSolutionUncheckedCreateWithoutAssignmentInput> | AssignmentSolutionCreateWithoutAssignmentInput[] | AssignmentSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutAssignmentInput | AssignmentSolutionCreateOrConnectWithoutAssignmentInput[]
    createMany?: AssignmentSolutionCreateManyAssignmentInputEnvelope
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CourseUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssignmentsInput
    upsert?: CourseUpsertWithoutAssignmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutAssignmentsInput, CourseUpdateWithoutAssignmentsInput>, CourseUncheckedUpdateWithoutAssignmentsInput>
  }

  export type AssignmentSolutionUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<AssignmentSolutionCreateWithoutAssignmentInput, AssignmentSolutionUncheckedCreateWithoutAssignmentInput> | AssignmentSolutionCreateWithoutAssignmentInput[] | AssignmentSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutAssignmentInput | AssignmentSolutionCreateOrConnectWithoutAssignmentInput[]
    upsert?: AssignmentSolutionUpsertWithWhereUniqueWithoutAssignmentInput | AssignmentSolutionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: AssignmentSolutionCreateManyAssignmentInputEnvelope
    set?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    disconnect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    delete?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    update?: AssignmentSolutionUpdateWithWhereUniqueWithoutAssignmentInput | AssignmentSolutionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: AssignmentSolutionUpdateManyWithWhereWithoutAssignmentInput | AssignmentSolutionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: AssignmentSolutionScalarWhereInput | AssignmentSolutionScalarWhereInput[]
  }

  export type AssignmentSolutionUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<AssignmentSolutionCreateWithoutAssignmentInput, AssignmentSolutionUncheckedCreateWithoutAssignmentInput> | AssignmentSolutionCreateWithoutAssignmentInput[] | AssignmentSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSolutionCreateOrConnectWithoutAssignmentInput | AssignmentSolutionCreateOrConnectWithoutAssignmentInput[]
    upsert?: AssignmentSolutionUpsertWithWhereUniqueWithoutAssignmentInput | AssignmentSolutionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: AssignmentSolutionCreateManyAssignmentInputEnvelope
    set?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    disconnect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    delete?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    connect?: AssignmentSolutionWhereUniqueInput | AssignmentSolutionWhereUniqueInput[]
    update?: AssignmentSolutionUpdateWithWhereUniqueWithoutAssignmentInput | AssignmentSolutionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: AssignmentSolutionUpdateManyWithWhereWithoutAssignmentInput | AssignmentSolutionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: AssignmentSolutionScalarWhereInput | AssignmentSolutionScalarWhereInput[]
  }

  export type AssignmentCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSolutionsInput
    connect?: AssignmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmitted_assignmentsInput = {
    create?: XOR<UserCreateWithoutSubmitted_assignmentsInput, UserUncheckedCreateWithoutSubmitted_assignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmitted_assignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type AssignmentUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSolutionsInput
    upsert?: AssignmentUpsertWithoutSolutionsInput
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutSolutionsInput, AssignmentUpdateWithoutSolutionsInput>, AssignmentUncheckedUpdateWithoutSolutionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmitted_assignmentsNestedInput = {
    create?: XOR<UserCreateWithoutSubmitted_assignmentsInput, UserUncheckedCreateWithoutSubmitted_assignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmitted_assignmentsInput
    upsert?: UserUpsertWithoutSubmitted_assignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmitted_assignmentsInput, UserUpdateWithoutSubmitted_assignmentsInput>, UserUncheckedUpdateWithoutSubmitted_assignmentsInput>
  }

  export type CourseCreateNestedOneWithoutSessionsInput = {
    create?: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSessionsInput
    connect?: CourseWhereUniqueInput
  }

  export type ExerciseCreateNestedManyWithoutSessionInput = {
    create?: XOR<ExerciseCreateWithoutSessionInput, ExerciseUncheckedCreateWithoutSessionInput> | ExerciseCreateWithoutSessionInput[] | ExerciseUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutSessionInput | ExerciseCreateOrConnectWithoutSessionInput[]
    createMany?: ExerciseCreateManySessionInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ExerciseCreateWithoutSessionInput, ExerciseUncheckedCreateWithoutSessionInput> | ExerciseCreateWithoutSessionInput[] | ExerciseUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutSessionInput | ExerciseCreateOrConnectWithoutSessionInput[]
    createMany?: ExerciseCreateManySessionInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSessionsInput
    upsert?: CourseUpsertWithoutSessionsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutSessionsInput, CourseUpdateWithoutSessionsInput>, CourseUncheckedUpdateWithoutSessionsInput>
  }

  export type ExerciseUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ExerciseCreateWithoutSessionInput, ExerciseUncheckedCreateWithoutSessionInput> | ExerciseCreateWithoutSessionInput[] | ExerciseUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutSessionInput | ExerciseCreateOrConnectWithoutSessionInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutSessionInput | ExerciseUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ExerciseCreateManySessionInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutSessionInput | ExerciseUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutSessionInput | ExerciseUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ExerciseCreateWithoutSessionInput, ExerciseUncheckedCreateWithoutSessionInput> | ExerciseCreateWithoutSessionInput[] | ExerciseUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutSessionInput | ExerciseCreateOrConnectWithoutSessionInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutSessionInput | ExerciseUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ExerciseCreateManySessionInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutSessionInput | ExerciseUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutSessionInput | ExerciseUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type SessionCreateNestedOneWithoutExercisesInput = {
    create?: XOR<SessionCreateWithoutExercisesInput, SessionUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutExercisesInput
    connect?: SessionWhereUniqueInput
  }

  export type TestCaseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<TestCaseCreateWithoutExerciseInput, TestCaseUncheckedCreateWithoutExerciseInput> | TestCaseCreateWithoutExerciseInput[] | TestCaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TestCaseCreateOrConnectWithoutExerciseInput | TestCaseCreateOrConnectWithoutExerciseInput[]
    createMany?: TestCaseCreateManyExerciseInputEnvelope
    connect?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
  }

  export type HintCreateNestedManyWithoutExerciseInput = {
    create?: XOR<HintCreateWithoutExerciseInput, HintUncheckedCreateWithoutExerciseInput> | HintCreateWithoutExerciseInput[] | HintUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: HintCreateOrConnectWithoutExerciseInput | HintCreateOrConnectWithoutExerciseInput[]
    createMany?: HintCreateManyExerciseInputEnvelope
    connect?: HintWhereUniqueInput | HintWhereUniqueInput[]
  }

  export type ExerciseSolutionCreateNestedManyWithoutExerciseInput = {
    create?: XOR<ExerciseSolutionCreateWithoutExerciseInput, ExerciseSolutionUncheckedCreateWithoutExerciseInput> | ExerciseSolutionCreateWithoutExerciseInput[] | ExerciseSolutionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutExerciseInput | ExerciseSolutionCreateOrConnectWithoutExerciseInput[]
    createMany?: ExerciseSolutionCreateManyExerciseInputEnvelope
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
  }

  export type TestCaseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<TestCaseCreateWithoutExerciseInput, TestCaseUncheckedCreateWithoutExerciseInput> | TestCaseCreateWithoutExerciseInput[] | TestCaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TestCaseCreateOrConnectWithoutExerciseInput | TestCaseCreateOrConnectWithoutExerciseInput[]
    createMany?: TestCaseCreateManyExerciseInputEnvelope
    connect?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
  }

  export type HintUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<HintCreateWithoutExerciseInput, HintUncheckedCreateWithoutExerciseInput> | HintCreateWithoutExerciseInput[] | HintUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: HintCreateOrConnectWithoutExerciseInput | HintCreateOrConnectWithoutExerciseInput[]
    createMany?: HintCreateManyExerciseInputEnvelope
    connect?: HintWhereUniqueInput | HintWhereUniqueInput[]
  }

  export type ExerciseSolutionUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<ExerciseSolutionCreateWithoutExerciseInput, ExerciseSolutionUncheckedCreateWithoutExerciseInput> | ExerciseSolutionCreateWithoutExerciseInput[] | ExerciseSolutionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutExerciseInput | ExerciseSolutionCreateOrConnectWithoutExerciseInput[]
    createMany?: ExerciseSolutionCreateManyExerciseInputEnvelope
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
  }

  export type SessionUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<SessionCreateWithoutExercisesInput, SessionUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutExercisesInput
    upsert?: SessionUpsertWithoutExercisesInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutExercisesInput, SessionUpdateWithoutExercisesInput>, SessionUncheckedUpdateWithoutExercisesInput>
  }

  export type TestCaseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<TestCaseCreateWithoutExerciseInput, TestCaseUncheckedCreateWithoutExerciseInput> | TestCaseCreateWithoutExerciseInput[] | TestCaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TestCaseCreateOrConnectWithoutExerciseInput | TestCaseCreateOrConnectWithoutExerciseInput[]
    upsert?: TestCaseUpsertWithWhereUniqueWithoutExerciseInput | TestCaseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: TestCaseCreateManyExerciseInputEnvelope
    set?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    disconnect?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    delete?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    connect?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    update?: TestCaseUpdateWithWhereUniqueWithoutExerciseInput | TestCaseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: TestCaseUpdateManyWithWhereWithoutExerciseInput | TestCaseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: TestCaseScalarWhereInput | TestCaseScalarWhereInput[]
  }

  export type HintUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<HintCreateWithoutExerciseInput, HintUncheckedCreateWithoutExerciseInput> | HintCreateWithoutExerciseInput[] | HintUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: HintCreateOrConnectWithoutExerciseInput | HintCreateOrConnectWithoutExerciseInput[]
    upsert?: HintUpsertWithWhereUniqueWithoutExerciseInput | HintUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: HintCreateManyExerciseInputEnvelope
    set?: HintWhereUniqueInput | HintWhereUniqueInput[]
    disconnect?: HintWhereUniqueInput | HintWhereUniqueInput[]
    delete?: HintWhereUniqueInput | HintWhereUniqueInput[]
    connect?: HintWhereUniqueInput | HintWhereUniqueInput[]
    update?: HintUpdateWithWhereUniqueWithoutExerciseInput | HintUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: HintUpdateManyWithWhereWithoutExerciseInput | HintUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: HintScalarWhereInput | HintScalarWhereInput[]
  }

  export type ExerciseSolutionUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<ExerciseSolutionCreateWithoutExerciseInput, ExerciseSolutionUncheckedCreateWithoutExerciseInput> | ExerciseSolutionCreateWithoutExerciseInput[] | ExerciseSolutionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutExerciseInput | ExerciseSolutionCreateOrConnectWithoutExerciseInput[]
    upsert?: ExerciseSolutionUpsertWithWhereUniqueWithoutExerciseInput | ExerciseSolutionUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: ExerciseSolutionCreateManyExerciseInputEnvelope
    set?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    disconnect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    delete?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    update?: ExerciseSolutionUpdateWithWhereUniqueWithoutExerciseInput | ExerciseSolutionUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: ExerciseSolutionUpdateManyWithWhereWithoutExerciseInput | ExerciseSolutionUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: ExerciseSolutionScalarWhereInput | ExerciseSolutionScalarWhereInput[]
  }

  export type TestCaseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<TestCaseCreateWithoutExerciseInput, TestCaseUncheckedCreateWithoutExerciseInput> | TestCaseCreateWithoutExerciseInput[] | TestCaseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: TestCaseCreateOrConnectWithoutExerciseInput | TestCaseCreateOrConnectWithoutExerciseInput[]
    upsert?: TestCaseUpsertWithWhereUniqueWithoutExerciseInput | TestCaseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: TestCaseCreateManyExerciseInputEnvelope
    set?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    disconnect?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    delete?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    connect?: TestCaseWhereUniqueInput | TestCaseWhereUniqueInput[]
    update?: TestCaseUpdateWithWhereUniqueWithoutExerciseInput | TestCaseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: TestCaseUpdateManyWithWhereWithoutExerciseInput | TestCaseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: TestCaseScalarWhereInput | TestCaseScalarWhereInput[]
  }

  export type HintUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<HintCreateWithoutExerciseInput, HintUncheckedCreateWithoutExerciseInput> | HintCreateWithoutExerciseInput[] | HintUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: HintCreateOrConnectWithoutExerciseInput | HintCreateOrConnectWithoutExerciseInput[]
    upsert?: HintUpsertWithWhereUniqueWithoutExerciseInput | HintUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: HintCreateManyExerciseInputEnvelope
    set?: HintWhereUniqueInput | HintWhereUniqueInput[]
    disconnect?: HintWhereUniqueInput | HintWhereUniqueInput[]
    delete?: HintWhereUniqueInput | HintWhereUniqueInput[]
    connect?: HintWhereUniqueInput | HintWhereUniqueInput[]
    update?: HintUpdateWithWhereUniqueWithoutExerciseInput | HintUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: HintUpdateManyWithWhereWithoutExerciseInput | HintUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: HintScalarWhereInput | HintScalarWhereInput[]
  }

  export type ExerciseSolutionUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<ExerciseSolutionCreateWithoutExerciseInput, ExerciseSolutionUncheckedCreateWithoutExerciseInput> | ExerciseSolutionCreateWithoutExerciseInput[] | ExerciseSolutionUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseSolutionCreateOrConnectWithoutExerciseInput | ExerciseSolutionCreateOrConnectWithoutExerciseInput[]
    upsert?: ExerciseSolutionUpsertWithWhereUniqueWithoutExerciseInput | ExerciseSolutionUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: ExerciseSolutionCreateManyExerciseInputEnvelope
    set?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    disconnect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    delete?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    connect?: ExerciseSolutionWhereUniqueInput | ExerciseSolutionWhereUniqueInput[]
    update?: ExerciseSolutionUpdateWithWhereUniqueWithoutExerciseInput | ExerciseSolutionUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: ExerciseSolutionUpdateManyWithWhereWithoutExerciseInput | ExerciseSolutionUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: ExerciseSolutionScalarWhereInput | ExerciseSolutionScalarWhereInput[]
  }

  export type ExerciseCreateNestedOneWithoutTest_caseInput = {
    create?: XOR<ExerciseCreateWithoutTest_caseInput, ExerciseUncheckedCreateWithoutTest_caseInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutTest_caseInput
    connect?: ExerciseWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ExerciseUpdateOneRequiredWithoutTest_caseNestedInput = {
    create?: XOR<ExerciseCreateWithoutTest_caseInput, ExerciseUncheckedCreateWithoutTest_caseInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutTest_caseInput
    upsert?: ExerciseUpsertWithoutTest_caseInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutTest_caseInput, ExerciseUpdateWithoutTest_caseInput>, ExerciseUncheckedUpdateWithoutTest_caseInput>
  }

  export type ExerciseCreateNestedOneWithoutHintsInput = {
    create?: XOR<ExerciseCreateWithoutHintsInput, ExerciseUncheckedCreateWithoutHintsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutHintsInput
    connect?: ExerciseWhereUniqueInput
  }

  export type ExerciseUpdateOneRequiredWithoutHintsNestedInput = {
    create?: XOR<ExerciseCreateWithoutHintsInput, ExerciseUncheckedCreateWithoutHintsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutHintsInput
    upsert?: ExerciseUpsertWithoutHintsInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutHintsInput, ExerciseUpdateWithoutHintsInput>, ExerciseUncheckedUpdateWithoutHintsInput>
  }

  export type ExerciseCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<ExerciseCreateWithoutSolutionsInput, ExerciseUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutSolutionsInput
    connect?: ExerciseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmitted_exercisesInput = {
    create?: XOR<UserCreateWithoutSubmitted_exercisesInput, UserUncheckedCreateWithoutSubmitted_exercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmitted_exercisesInput
    connect?: UserWhereUniqueInput
  }

  export type ExerciseUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<ExerciseCreateWithoutSolutionsInput, ExerciseUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutSolutionsInput
    upsert?: ExerciseUpsertWithoutSolutionsInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutSolutionsInput, ExerciseUpdateWithoutSolutionsInput>, ExerciseUncheckedUpdateWithoutSolutionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmitted_exercisesNestedInput = {
    create?: XOR<UserCreateWithoutSubmitted_exercisesInput, UserUncheckedCreateWithoutSubmitted_exercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmitted_exercisesInput
    upsert?: UserUpsertWithoutSubmitted_exercisesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmitted_exercisesInput, UserUpdateWithoutSubmitted_exercisesInput>, UserUncheckedUpdateWithoutSubmitted_exercisesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CourseCreateWithoutEnrollmentsInput = {
    name: string
    sessions?: SessionCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutEnrollmentsInput = {
    course_id?: number
    name: string
    sessions?: SessionUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutEnrollmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
  }

  export type UserCreateWithoutEnrollmentsInput = {
    username: string
    password: string
    submitted_assignments?: AssignmentSolutionCreateNestedManyWithoutStudentInput
    submitted_exercises?: ExerciseSolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEnrollmentsInput = {
    user_id?: number
    username: string
    password: string
    submitted_assignments?: AssignmentSolutionUncheckedCreateNestedManyWithoutStudentInput
    submitted_exercises?: ExerciseSolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEnrollmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
  }

  export type CourseUpsertWithoutEnrollmentsInput = {
    update: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CourseUpdateWithoutEnrollmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutEnrollmentsInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutEnrollmentsInput = {
    update: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateWithoutEnrollmentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    submitted_assignments?: AssignmentSolutionUpdateManyWithoutStudentNestedInput
    submitted_exercises?: ExerciseSolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    submitted_assignments?: AssignmentSolutionUncheckedUpdateManyWithoutStudentNestedInput
    submitted_exercises?: ExerciseSolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EnrollmentsCreateWithoutUserInput = {
    role?: $Enums.Role
    total_points?: number | null
    course?: CourseCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateWithoutUserInput = {
    role?: $Enums.Role
    total_points?: number | null
  }

  export type EnrollmentsCreateOrConnectWithoutUserInput = {
    where: EnrollmentsWhereUniqueInput
    create: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentsCreateManyUserInputEnvelope = {
    data: EnrollmentsCreateManyUserInput | EnrollmentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentSolutionCreateWithoutStudentInput = {
    solution: string
    feedback: string
    assignment?: AssignmentCreateNestedOneWithoutSolutionsInput
  }

  export type AssignmentSolutionUncheckedCreateWithoutStudentInput = {
    solution: string
    feedback: string
  }

  export type AssignmentSolutionCreateOrConnectWithoutStudentInput = {
    where: AssignmentSolutionWhereUniqueInput
    create: XOR<AssignmentSolutionCreateWithoutStudentInput, AssignmentSolutionUncheckedCreateWithoutStudentInput>
  }

  export type AssignmentSolutionCreateManyStudentInputEnvelope = {
    data: AssignmentSolutionCreateManyStudentInput | AssignmentSolutionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseSolutionCreateWithoutUserInput = {
    solution: string
    is_public: boolean
    is_pinned: boolean
    exercise?: ExerciseCreateNestedOneWithoutSolutionsInput
  }

  export type ExerciseSolutionUncheckedCreateWithoutUserInput = {
    solution: string
    is_public: boolean
    is_pinned: boolean
  }

  export type ExerciseSolutionCreateOrConnectWithoutUserInput = {
    where: ExerciseSolutionWhereUniqueInput
    create: XOR<ExerciseSolutionCreateWithoutUserInput, ExerciseSolutionUncheckedCreateWithoutUserInput>
  }

  export type ExerciseSolutionCreateManyUserInputEnvelope = {
    data: ExerciseSolutionCreateManyUserInput | ExerciseSolutionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentsUpsertWithWhereUniqueWithoutUserInput = {
    where: EnrollmentsWhereUniqueInput
    update: XOR<EnrollmentsUpdateWithoutUserInput, EnrollmentsUncheckedUpdateWithoutUserInput>
    create: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentsUpdateWithWhereUniqueWithoutUserInput = {
    where: EnrollmentsWhereUniqueInput
    data: XOR<EnrollmentsUpdateWithoutUserInput, EnrollmentsUncheckedUpdateWithoutUserInput>
  }

  export type EnrollmentsUpdateManyWithWhereWithoutUserInput = {
    where: EnrollmentsScalarWhereInput
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyWithoutUserInput>
  }

  export type EnrollmentsScalarWhereInput = {
    AND?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
    OR?: EnrollmentsScalarWhereInput[]
    NOT?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
    enrollment_id?: IntFilter<"Enrollments"> | number
    role?: EnumRoleFilter<"Enrollments"> | $Enums.Role
    total_points?: IntNullableFilter<"Enrollments"> | number | null
  }

  export type AssignmentSolutionUpsertWithWhereUniqueWithoutStudentInput = {
    where: AssignmentSolutionWhereUniqueInput
    update: XOR<AssignmentSolutionUpdateWithoutStudentInput, AssignmentSolutionUncheckedUpdateWithoutStudentInput>
    create: XOR<AssignmentSolutionCreateWithoutStudentInput, AssignmentSolutionUncheckedCreateWithoutStudentInput>
  }

  export type AssignmentSolutionUpdateWithWhereUniqueWithoutStudentInput = {
    where: AssignmentSolutionWhereUniqueInput
    data: XOR<AssignmentSolutionUpdateWithoutStudentInput, AssignmentSolutionUncheckedUpdateWithoutStudentInput>
  }

  export type AssignmentSolutionUpdateManyWithWhereWithoutStudentInput = {
    where: AssignmentSolutionScalarWhereInput
    data: XOR<AssignmentSolutionUpdateManyMutationInput, AssignmentSolutionUncheckedUpdateManyWithoutStudentInput>
  }

  export type AssignmentSolutionScalarWhereInput = {
    AND?: AssignmentSolutionScalarWhereInput | AssignmentSolutionScalarWhereInput[]
    OR?: AssignmentSolutionScalarWhereInput[]
    NOT?: AssignmentSolutionScalarWhereInput | AssignmentSolutionScalarWhereInput[]
    assignment_solution_id?: IntFilter<"AssignmentSolution"> | number
    solution?: StringFilter<"AssignmentSolution"> | string
    feedback?: StringFilter<"AssignmentSolution"> | string
  }

  export type ExerciseSolutionUpsertWithWhereUniqueWithoutUserInput = {
    where: ExerciseSolutionWhereUniqueInput
    update: XOR<ExerciseSolutionUpdateWithoutUserInput, ExerciseSolutionUncheckedUpdateWithoutUserInput>
    create: XOR<ExerciseSolutionCreateWithoutUserInput, ExerciseSolutionUncheckedCreateWithoutUserInput>
  }

  export type ExerciseSolutionUpdateWithWhereUniqueWithoutUserInput = {
    where: ExerciseSolutionWhereUniqueInput
    data: XOR<ExerciseSolutionUpdateWithoutUserInput, ExerciseSolutionUncheckedUpdateWithoutUserInput>
  }

  export type ExerciseSolutionUpdateManyWithWhereWithoutUserInput = {
    where: ExerciseSolutionScalarWhereInput
    data: XOR<ExerciseSolutionUpdateManyMutationInput, ExerciseSolutionUncheckedUpdateManyWithoutUserInput>
  }

  export type ExerciseSolutionScalarWhereInput = {
    AND?: ExerciseSolutionScalarWhereInput | ExerciseSolutionScalarWhereInput[]
    OR?: ExerciseSolutionScalarWhereInput[]
    NOT?: ExerciseSolutionScalarWhereInput | ExerciseSolutionScalarWhereInput[]
    exercise_solution_id?: IntFilter<"ExerciseSolution"> | number
    solution?: StringFilter<"ExerciseSolution"> | string
    is_public?: BoolFilter<"ExerciseSolution"> | boolean
    is_pinned?: BoolFilter<"ExerciseSolution"> | boolean
  }

  export type EnrollmentsCreateWithoutCourseInput = {
    role?: $Enums.Role
    total_points?: number | null
    user?: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateWithoutCourseInput = {
    role?: $Enums.Role
    total_points?: number | null
  }

  export type EnrollmentsCreateOrConnectWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    create: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentsCreateManyCourseInputEnvelope = {
    data: EnrollmentsCreateManyCourseInput | EnrollmentsCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutCourseInput = {
    name: string
    exercises?: ExerciseCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutCourseInput = {
    name: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutCourseInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput>
  }

  export type SessionCreateManyCourseInputEnvelope = {
    data: SessionCreateManyCourseInput | SessionCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutCourseInput = {
    name: string
    description: string
    due_date: Date | string
    language: string
    solutions?: AssignmentSolutionCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutCourseInput = {
    name: string
    description: string
    due_date: Date | string
    language: string
    solutions?: AssignmentSolutionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput>
  }

  export type AssignmentCreateManyCourseInputEnvelope = {
    data: AssignmentCreateManyCourseInput | AssignmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentsUpsertWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    update: XOR<EnrollmentsUpdateWithoutCourseInput, EnrollmentsUncheckedUpdateWithoutCourseInput>
    create: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentsUpdateWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    data: XOR<EnrollmentsUpdateWithoutCourseInput, EnrollmentsUncheckedUpdateWithoutCourseInput>
  }

  export type EnrollmentsUpdateManyWithWhereWithoutCourseInput = {
    where: EnrollmentsScalarWhereInput
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyWithoutCourseInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutCourseInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutCourseInput, SessionUncheckedUpdateWithoutCourseInput>
    create: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutCourseInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutCourseInput, SessionUncheckedUpdateWithoutCourseInput>
  }

  export type SessionUpdateManyWithWhereWithoutCourseInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutCourseInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    session_id?: IntFilter<"Session"> | number
    name?: StringFilter<"Session"> | string
  }

  export type AssignmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutCourseInput, AssignmentUncheckedUpdateWithoutCourseInput>
    create: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutCourseInput, AssignmentUncheckedUpdateWithoutCourseInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutCourseInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    OR?: AssignmentScalarWhereInput[]
    NOT?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    assignment_id?: IntFilter<"Assignment"> | number
    name?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    due_date?: DateTimeFilter<"Assignment"> | Date | string
    language?: StringFilter<"Assignment"> | string
  }

  export type CourseCreateWithoutAssignmentsInput = {
    name: string
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    sessions?: SessionCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutAssignmentsInput = {
    course_id?: number
    name: string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutAssignmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
  }

  export type AssignmentSolutionCreateWithoutAssignmentInput = {
    solution: string
    feedback: string
    student?: UserCreateNestedOneWithoutSubmitted_assignmentsInput
  }

  export type AssignmentSolutionUncheckedCreateWithoutAssignmentInput = {
    solution: string
    feedback: string
  }

  export type AssignmentSolutionCreateOrConnectWithoutAssignmentInput = {
    where: AssignmentSolutionWhereUniqueInput
    create: XOR<AssignmentSolutionCreateWithoutAssignmentInput, AssignmentSolutionUncheckedCreateWithoutAssignmentInput>
  }

  export type AssignmentSolutionCreateManyAssignmentInputEnvelope = {
    data: AssignmentSolutionCreateManyAssignmentInput | AssignmentSolutionCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutAssignmentsInput = {
    update: XOR<CourseUpdateWithoutAssignmentsInput, CourseUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutAssignmentsInput, CourseUncheckedUpdateWithoutAssignmentsInput>
  }

  export type CourseUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    sessions?: SessionUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutAssignmentsInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type AssignmentSolutionUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: AssignmentSolutionWhereUniqueInput
    update: XOR<AssignmentSolutionUpdateWithoutAssignmentInput, AssignmentSolutionUncheckedUpdateWithoutAssignmentInput>
    create: XOR<AssignmentSolutionCreateWithoutAssignmentInput, AssignmentSolutionUncheckedCreateWithoutAssignmentInput>
  }

  export type AssignmentSolutionUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: AssignmentSolutionWhereUniqueInput
    data: XOR<AssignmentSolutionUpdateWithoutAssignmentInput, AssignmentSolutionUncheckedUpdateWithoutAssignmentInput>
  }

  export type AssignmentSolutionUpdateManyWithWhereWithoutAssignmentInput = {
    where: AssignmentSolutionScalarWhereInput
    data: XOR<AssignmentSolutionUpdateManyMutationInput, AssignmentSolutionUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type AssignmentCreateWithoutSolutionsInput = {
    name: string
    description: string
    due_date: Date | string
    language: string
    course?: CourseCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutSolutionsInput = {
    assignment_id?: number
    name: string
    description: string
    due_date: Date | string
    language: string
  }

  export type AssignmentCreateOrConnectWithoutSolutionsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
  }

  export type UserCreateWithoutSubmitted_assignmentsInput = {
    username: string
    password: string
    enrollments?: EnrollmentsCreateNestedManyWithoutUserInput
    submitted_exercises?: ExerciseSolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubmitted_assignmentsInput = {
    user_id?: number
    username: string
    password: string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutUserInput
    submitted_exercises?: ExerciseSolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubmitted_assignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmitted_assignmentsInput, UserUncheckedCreateWithoutSubmitted_assignmentsInput>
  }

  export type AssignmentUpsertWithoutSolutionsInput = {
    update: XOR<AssignmentUpdateWithoutSolutionsInput, AssignmentUncheckedUpdateWithoutSolutionsInput>
    create: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutSolutionsInput, AssignmentUncheckedUpdateWithoutSolutionsInput>
  }

  export type AssignmentUpdateWithoutSolutionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSolutionsInput = {
    assignment_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutSubmitted_assignmentsInput = {
    update: XOR<UserUpdateWithoutSubmitted_assignmentsInput, UserUncheckedUpdateWithoutSubmitted_assignmentsInput>
    create: XOR<UserCreateWithoutSubmitted_assignmentsInput, UserUncheckedCreateWithoutSubmitted_assignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmitted_assignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmitted_assignmentsInput, UserUncheckedUpdateWithoutSubmitted_assignmentsInput>
  }

  export type UserUpdateWithoutSubmitted_assignmentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUpdateManyWithoutUserNestedInput
    submitted_exercises?: ExerciseSolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmitted_assignmentsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutUserNestedInput
    submitted_exercises?: ExerciseSolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseCreateWithoutSessionsInput = {
    name: string
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutSessionsInput = {
    course_id?: number
    name: string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutSessionsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
  }

  export type ExerciseCreateWithoutSessionInput = {
    name: string
    description: string
    points: number
    language: string
    code_template: string
    test_case?: TestCaseCreateNestedManyWithoutExerciseInput
    hints?: HintCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutSessionInput = {
    name: string
    description: string
    points: number
    language: string
    code_template: string
    test_case?: TestCaseUncheckedCreateNestedManyWithoutExerciseInput
    hints?: HintUncheckedCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutSessionInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutSessionInput, ExerciseUncheckedCreateWithoutSessionInput>
  }

  export type ExerciseCreateManySessionInputEnvelope = {
    data: ExerciseCreateManySessionInput | ExerciseCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutSessionsInput = {
    update: XOR<CourseUpdateWithoutSessionsInput, CourseUncheckedUpdateWithoutSessionsInput>
    create: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutSessionsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutSessionsInput, CourseUncheckedUpdateWithoutSessionsInput>
  }

  export type CourseUpdateWithoutSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutSessionsInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type ExerciseUpsertWithWhereUniqueWithoutSessionInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutSessionInput, ExerciseUncheckedUpdateWithoutSessionInput>
    create: XOR<ExerciseCreateWithoutSessionInput, ExerciseUncheckedCreateWithoutSessionInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutSessionInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutSessionInput, ExerciseUncheckedUpdateWithoutSessionInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutSessionInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutSessionInput>
  }

  export type ExerciseScalarWhereInput = {
    AND?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    OR?: ExerciseScalarWhereInput[]
    NOT?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    exercise_id?: IntFilter<"Exercise"> | number
    name?: StringFilter<"Exercise"> | string
    description?: StringFilter<"Exercise"> | string
    points?: IntFilter<"Exercise"> | number
    language?: StringFilter<"Exercise"> | string
    code_template?: StringFilter<"Exercise"> | string
  }

  export type SessionCreateWithoutExercisesInput = {
    name: string
    course?: CourseCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutExercisesInput = {
    session_id?: number
    name: string
  }

  export type SessionCreateOrConnectWithoutExercisesInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutExercisesInput, SessionUncheckedCreateWithoutExercisesInput>
  }

  export type TestCaseCreateWithoutExerciseInput = {
    code: string
    is_visible: boolean
  }

  export type TestCaseUncheckedCreateWithoutExerciseInput = {
    code: string
    is_visible: boolean
  }

  export type TestCaseCreateOrConnectWithoutExerciseInput = {
    where: TestCaseWhereUniqueInput
    create: XOR<TestCaseCreateWithoutExerciseInput, TestCaseUncheckedCreateWithoutExerciseInput>
  }

  export type TestCaseCreateManyExerciseInputEnvelope = {
    data: TestCaseCreateManyExerciseInput | TestCaseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type HintCreateWithoutExerciseInput = {
    description: string
    order?: number
  }

  export type HintUncheckedCreateWithoutExerciseInput = {
    description: string
    order?: number
  }

  export type HintCreateOrConnectWithoutExerciseInput = {
    where: HintWhereUniqueInput
    create: XOR<HintCreateWithoutExerciseInput, HintUncheckedCreateWithoutExerciseInput>
  }

  export type HintCreateManyExerciseInputEnvelope = {
    data: HintCreateManyExerciseInput | HintCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseSolutionCreateWithoutExerciseInput = {
    solution: string
    is_public: boolean
    is_pinned: boolean
    user?: UserCreateNestedOneWithoutSubmitted_exercisesInput
  }

  export type ExerciseSolutionUncheckedCreateWithoutExerciseInput = {
    solution: string
    is_public: boolean
    is_pinned: boolean
  }

  export type ExerciseSolutionCreateOrConnectWithoutExerciseInput = {
    where: ExerciseSolutionWhereUniqueInput
    create: XOR<ExerciseSolutionCreateWithoutExerciseInput, ExerciseSolutionUncheckedCreateWithoutExerciseInput>
  }

  export type ExerciseSolutionCreateManyExerciseInputEnvelope = {
    data: ExerciseSolutionCreateManyExerciseInput | ExerciseSolutionCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithoutExercisesInput = {
    update: XOR<SessionUpdateWithoutExercisesInput, SessionUncheckedUpdateWithoutExercisesInput>
    create: XOR<SessionCreateWithoutExercisesInput, SessionUncheckedCreateWithoutExercisesInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutExercisesInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutExercisesInput, SessionUncheckedUpdateWithoutExercisesInput>
  }

  export type SessionUpdateWithoutExercisesInput = {
    name?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutExercisesInput = {
    session_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TestCaseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: TestCaseWhereUniqueInput
    update: XOR<TestCaseUpdateWithoutExerciseInput, TestCaseUncheckedUpdateWithoutExerciseInput>
    create: XOR<TestCaseCreateWithoutExerciseInput, TestCaseUncheckedCreateWithoutExerciseInput>
  }

  export type TestCaseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: TestCaseWhereUniqueInput
    data: XOR<TestCaseUpdateWithoutExerciseInput, TestCaseUncheckedUpdateWithoutExerciseInput>
  }

  export type TestCaseUpdateManyWithWhereWithoutExerciseInput = {
    where: TestCaseScalarWhereInput
    data: XOR<TestCaseUpdateManyMutationInput, TestCaseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type TestCaseScalarWhereInput = {
    AND?: TestCaseScalarWhereInput | TestCaseScalarWhereInput[]
    OR?: TestCaseScalarWhereInput[]
    NOT?: TestCaseScalarWhereInput | TestCaseScalarWhereInput[]
    test_case_id?: IntFilter<"TestCase"> | number
    code?: StringFilter<"TestCase"> | string
    is_visible?: BoolFilter<"TestCase"> | boolean
  }

  export type HintUpsertWithWhereUniqueWithoutExerciseInput = {
    where: HintWhereUniqueInput
    update: XOR<HintUpdateWithoutExerciseInput, HintUncheckedUpdateWithoutExerciseInput>
    create: XOR<HintCreateWithoutExerciseInput, HintUncheckedCreateWithoutExerciseInput>
  }

  export type HintUpdateWithWhereUniqueWithoutExerciseInput = {
    where: HintWhereUniqueInput
    data: XOR<HintUpdateWithoutExerciseInput, HintUncheckedUpdateWithoutExerciseInput>
  }

  export type HintUpdateManyWithWhereWithoutExerciseInput = {
    where: HintScalarWhereInput
    data: XOR<HintUpdateManyMutationInput, HintUncheckedUpdateManyWithoutExerciseInput>
  }

  export type HintScalarWhereInput = {
    AND?: HintScalarWhereInput | HintScalarWhereInput[]
    OR?: HintScalarWhereInput[]
    NOT?: HintScalarWhereInput | HintScalarWhereInput[]
    hint_id?: IntFilter<"Hint"> | number
    description?: StringFilter<"Hint"> | string
    order?: IntFilter<"Hint"> | number
  }

  export type ExerciseSolutionUpsertWithWhereUniqueWithoutExerciseInput = {
    where: ExerciseSolutionWhereUniqueInput
    update: XOR<ExerciseSolutionUpdateWithoutExerciseInput, ExerciseSolutionUncheckedUpdateWithoutExerciseInput>
    create: XOR<ExerciseSolutionCreateWithoutExerciseInput, ExerciseSolutionUncheckedCreateWithoutExerciseInput>
  }

  export type ExerciseSolutionUpdateWithWhereUniqueWithoutExerciseInput = {
    where: ExerciseSolutionWhereUniqueInput
    data: XOR<ExerciseSolutionUpdateWithoutExerciseInput, ExerciseSolutionUncheckedUpdateWithoutExerciseInput>
  }

  export type ExerciseSolutionUpdateManyWithWhereWithoutExerciseInput = {
    where: ExerciseSolutionScalarWhereInput
    data: XOR<ExerciseSolutionUpdateManyMutationInput, ExerciseSolutionUncheckedUpdateManyWithoutExerciseInput>
  }

  export type ExerciseCreateWithoutTest_caseInput = {
    name: string
    description: string
    points: number
    language: string
    code_template: string
    session?: SessionCreateNestedOneWithoutExercisesInput
    hints?: HintCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutTest_caseInput = {
    exercise_id?: number
    name: string
    description: string
    points: number
    language: string
    code_template: string
    hints?: HintUncheckedCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutTest_caseInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutTest_caseInput, ExerciseUncheckedCreateWithoutTest_caseInput>
  }

  export type ExerciseUpsertWithoutTest_caseInput = {
    update: XOR<ExerciseUpdateWithoutTest_caseInput, ExerciseUncheckedUpdateWithoutTest_caseInput>
    create: XOR<ExerciseCreateWithoutTest_caseInput, ExerciseUncheckedCreateWithoutTest_caseInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutTest_caseInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutTest_caseInput, ExerciseUncheckedUpdateWithoutTest_caseInput>
  }

  export type ExerciseUpdateWithoutTest_caseInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    session?: SessionUpdateOneRequiredWithoutExercisesNestedInput
    hints?: HintUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutTest_caseInput = {
    exercise_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    hints?: HintUncheckedUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateWithoutHintsInput = {
    name: string
    description: string
    points: number
    language: string
    code_template: string
    session?: SessionCreateNestedOneWithoutExercisesInput
    test_case?: TestCaseCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutHintsInput = {
    exercise_id?: number
    name: string
    description: string
    points: number
    language: string
    code_template: string
    test_case?: TestCaseUncheckedCreateNestedManyWithoutExerciseInput
    solutions?: ExerciseSolutionUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutHintsInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutHintsInput, ExerciseUncheckedCreateWithoutHintsInput>
  }

  export type ExerciseUpsertWithoutHintsInput = {
    update: XOR<ExerciseUpdateWithoutHintsInput, ExerciseUncheckedUpdateWithoutHintsInput>
    create: XOR<ExerciseCreateWithoutHintsInput, ExerciseUncheckedCreateWithoutHintsInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutHintsInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutHintsInput, ExerciseUncheckedUpdateWithoutHintsInput>
  }

  export type ExerciseUpdateWithoutHintsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    session?: SessionUpdateOneRequiredWithoutExercisesNestedInput
    test_case?: TestCaseUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutHintsInput = {
    exercise_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    test_case?: TestCaseUncheckedUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateWithoutSolutionsInput = {
    name: string
    description: string
    points: number
    language: string
    code_template: string
    session?: SessionCreateNestedOneWithoutExercisesInput
    test_case?: TestCaseCreateNestedManyWithoutExerciseInput
    hints?: HintCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutSolutionsInput = {
    exercise_id?: number
    name: string
    description: string
    points: number
    language: string
    code_template: string
    test_case?: TestCaseUncheckedCreateNestedManyWithoutExerciseInput
    hints?: HintUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutSolutionsInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutSolutionsInput, ExerciseUncheckedCreateWithoutSolutionsInput>
  }

  export type UserCreateWithoutSubmitted_exercisesInput = {
    username: string
    password: string
    enrollments?: EnrollmentsCreateNestedManyWithoutUserInput
    submitted_assignments?: AssignmentSolutionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutSubmitted_exercisesInput = {
    user_id?: number
    username: string
    password: string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutUserInput
    submitted_assignments?: AssignmentSolutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutSubmitted_exercisesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmitted_exercisesInput, UserUncheckedCreateWithoutSubmitted_exercisesInput>
  }

  export type ExerciseUpsertWithoutSolutionsInput = {
    update: XOR<ExerciseUpdateWithoutSolutionsInput, ExerciseUncheckedUpdateWithoutSolutionsInput>
    create: XOR<ExerciseCreateWithoutSolutionsInput, ExerciseUncheckedCreateWithoutSolutionsInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutSolutionsInput, ExerciseUncheckedUpdateWithoutSolutionsInput>
  }

  export type ExerciseUpdateWithoutSolutionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    session?: SessionUpdateOneRequiredWithoutExercisesNestedInput
    test_case?: TestCaseUpdateManyWithoutExerciseNestedInput
    hints?: HintUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutSolutionsInput = {
    exercise_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    test_case?: TestCaseUncheckedUpdateManyWithoutExerciseNestedInput
    hints?: HintUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type UserUpsertWithoutSubmitted_exercisesInput = {
    update: XOR<UserUpdateWithoutSubmitted_exercisesInput, UserUncheckedUpdateWithoutSubmitted_exercisesInput>
    create: XOR<UserCreateWithoutSubmitted_exercisesInput, UserUncheckedCreateWithoutSubmitted_exercisesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmitted_exercisesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmitted_exercisesInput, UserUncheckedUpdateWithoutSubmitted_exercisesInput>
  }

  export type UserUpdateWithoutSubmitted_exercisesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUpdateManyWithoutUserNestedInput
    submitted_assignments?: AssignmentSolutionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmitted_exercisesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutUserNestedInput
    submitted_assignments?: AssignmentSolutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type EnrollmentsCreateManyUserInput = {
    role?: $Enums.Role
    total_points?: number | null
  }

  export type AssignmentSolutionCreateManyStudentInput = {
    solution: string
    feedback: string
  }

  export type ExerciseSolutionCreateManyUserInput = {
    solution: string
    is_public: boolean
    is_pinned: boolean
  }

  export type EnrollmentsUpdateWithoutUserInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateWithoutUserInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnrollmentsUncheckedUpdateManyWithoutUserInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssignmentSolutionUpdateWithoutStudentInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    assignment?: AssignmentUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type AssignmentSolutionUncheckedUpdateWithoutStudentInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentSolutionUncheckedUpdateManyWithoutStudentInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseSolutionUpdateWithoutUserInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    exercise?: ExerciseUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type ExerciseSolutionUncheckedUpdateWithoutUserInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseSolutionUncheckedUpdateManyWithoutUserInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EnrollmentsCreateManyCourseInput = {
    role?: $Enums.Role
    total_points?: number | null
  }

  export type SessionCreateManyCourseInput = {
    name: string
  }

  export type AssignmentCreateManyCourseInput = {
    name: string
    description: string
    due_date: Date | string
    language: string
  }

  export type EnrollmentsUpdateWithoutCourseInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateWithoutCourseInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnrollmentsUncheckedUpdateManyWithoutCourseInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    total_points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    solutions?: AssignmentSolutionUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
    solutions?: AssignmentSolutionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentSolutionCreateManyAssignmentInput = {
    solution: string
    feedback: string
  }

  export type AssignmentSolutionUpdateWithoutAssignmentInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    student?: UserUpdateOneRequiredWithoutSubmitted_assignmentsNestedInput
  }

  export type AssignmentSolutionUncheckedUpdateWithoutAssignmentInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentSolutionUncheckedUpdateManyWithoutAssignmentInput = {
    solution?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateManySessionInput = {
    name: string
    description: string
    points: number
    language: string
    code_template: string
  }

  export type ExerciseUpdateWithoutSessionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    test_case?: TestCaseUpdateManyWithoutExerciseNestedInput
    hints?: HintUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutSessionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
    test_case?: TestCaseUncheckedUpdateManyWithoutExerciseNestedInput
    hints?: HintUncheckedUpdateManyWithoutExerciseNestedInput
    solutions?: ExerciseSolutionUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutSessionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    code_template?: StringFieldUpdateOperationsInput | string
  }

  export type TestCaseCreateManyExerciseInput = {
    code: string
    is_visible: boolean
  }

  export type HintCreateManyExerciseInput = {
    description: string
    order?: number
  }

  export type ExerciseSolutionCreateManyExerciseInput = {
    solution: string
    is_public: boolean
    is_pinned: boolean
  }

  export type TestCaseUpdateWithoutExerciseInput = {
    code?: StringFieldUpdateOperationsInput | string
    is_visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestCaseUncheckedUpdateWithoutExerciseInput = {
    code?: StringFieldUpdateOperationsInput | string
    is_visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestCaseUncheckedUpdateManyWithoutExerciseInput = {
    code?: StringFieldUpdateOperationsInput | string
    is_visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HintUpdateWithoutExerciseInput = {
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type HintUncheckedUpdateWithoutExerciseInput = {
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type HintUncheckedUpdateManyWithoutExerciseInput = {
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseSolutionUpdateWithoutExerciseInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSubmitted_exercisesNestedInput
  }

  export type ExerciseSolutionUncheckedUpdateWithoutExerciseInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExerciseSolutionUncheckedUpdateManyWithoutExerciseInput = {
    solution?: StringFieldUpdateOperationsInput | string
    is_public?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseCountOutputTypeDefaultArgs instead
     */
    export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssignmentCountOutputTypeDefaultArgs instead
     */
    export type AssignmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssignmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionCountOutputTypeDefaultArgs instead
     */
    export type SessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseCountOutputTypeDefaultArgs instead
     */
    export type ExerciseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnrollmentsDefaultArgs instead
     */
    export type EnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnrollmentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssignmentDefaultArgs instead
     */
    export type AssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssignmentSolutionDefaultArgs instead
     */
    export type AssignmentSolutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssignmentSolutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseDefaultArgs instead
     */
    export type ExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TestCaseDefaultArgs instead
     */
    export type TestCaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TestCaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HintDefaultArgs instead
     */
    export type HintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HintDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseSolutionDefaultArgs instead
     */
    export type ExerciseSolutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseSolutionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}